#!/usr/bin/env bash

# This script controls the lifecycle of Concourse Server on *nix systems.
# See the usage() function for invocation details.
#
# Copyright (c) 2015 Cinchapi, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# These settings can, in rare circumstances, be modified to fit the needs of
# your deployment. Please contact Cinchapi support before changing any of
# these values.

# IMPORTANT - Please always stop Concourse Server before making any changes to
#             this file. Failure to do so may lead to operation failure.

# Options that are passed to Java to configure the Concourse Server runtime.
# Before changing these parameters, please check the documentation for
# concourse.prefs to see if the desired functionality is configured there (i.e
# the Concourse Server heap size is specified using the `heap_size` preference)
# because those take precedence.
JVMOPTS="
-Xms1024m
-Xmx1024m
-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=9010
-Dcom.sun.management.jmxremote.local.only=false
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false
-XX:+UseThreadPriorities
-XX:ThreadPriorityPolicy=42
-XX:CompileThreshold=500
"

# The following two lines are used by the chkconfig command. Change as is
# appropriate for your application.  They should remain commented.
# chkconfig: 2345 20 80
# description: Concourse Server

# Initialization block for the install_initd and remove_initd scripts used by
# SUSE linux distributions.
### BEGIN INIT INFO
# Provides: Concourse Server
# Required-Start: $local_fs $network $syslog
# Should-Start:
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Concourse Server
# Description: Concourse Server init script
### END INIT INFO

# DO NOT MAKE ANY CHANGES BEYOND THIS POINT
#-------------------------------------------------------------------------------

# Random utility functions
warn () {
  echo "$*"
}

die () {
  echo
  echo "$*"
  echo
  exit 1
}

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

# Get the name of the OS in case there is OS-spceific configuration that needs
# to occur. Variable values will generally correspond as follows:
#
# Value   | OS
# -----------------
# darwin  | OS X
# linux   | CentOS
OS=`uname -s | tr "[A-Z]" "[a-z]" | tr -d ' '`
cygwin=false
msys=false
darwin=false
case $OS in
  cygwin* )
  cygwin=true
  ;;
  darwin* )
  darwin=true
  ;;
  mingw* )
  msys=true
  ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Ensure that this script operates from the application root directory
cd "${0%/*}"
APP_HOME="`pwd -P`/.."
APP_HOME=`cd ${APP_HOME}; pwd`
APP_HOME_PROPERTY="org.cinchapi.concourse.server.home=$APP_HOME"
JVMOPTS=$JVMOPTS"
-D$APP_HOME_PROPERTY
"

# The location of the concourse.prefs file that is used to configure the
# application
PREFS=$APP_HOME"/conf/concourse.prefs"

# The place to store the PID
PIDFILE=$APP_HOME"/concourse.pid"

# The classpath for Concourse Server
CLASSPATH="$APP_HOME/lib/*"

#############################################################################
# Handle any variables in concourse.prefs that affect the JVM configuration #
#############################################################################

#jmx_port
JMX_PREF=`cat $PREFS | grep -e '^jmx_port\s*=\s*[0-9]\{1,\}$' | head -n1 | cut -d'=' -f2 | tr -d ' '`
if [ -z "$JMX_PREF" ]; then
  JMX_PREF="9010"
fi
JVMOPTS=${JVMOPTS/jmxremote.port=9010/jmxremote.port=$JMX_PREF}

#heap_size
HEAP_PREF=`cat $PREFS | grep -e '^heap_size\s*=\s*[0-9]\{1,\}\(m\|M\|mb\|MB\|g\|G\|gb\|GB\)$' | head -n1 | cut -d'=' -f2 | tr -d ' '`
HEAP_PREF=`echo $HEAP_PREF | awk '{print tolower($0)}'`
HEAP=${HEAP_PREF//[!0-9]/}
if [[ $HEAP_PREF == *g* ]]
  then
  HEAP=$(($HEAP * 1024))
fi
if [ -z "$HEAP" ]; then
  HEAP="1024"
fi
JVMOPTS=${JVMOPTS/Xms1024m/Xms$HEAP"m"}
JVMOPTS=${JVMOPTS/Xmx1024m/Xmx$HEAP"m"}

# if the log_level = DEBUG, these options are also passed to the JVM.
DEBUG=`cat $PREFS | grep -e '^log_level\s*=\s*[Dd][Ee][Bb][Uu][Gg]'`
if [ -n "$DEBUG" ]
  then
  JVMOPTS=$JVMOPTS"
  -XX:+HeapDumpOnOutOfMemoryError
  -XX:HeapDumpPath=$APP_HOME/log
  -Xloggc:$APP_HOME/log/gc.log
  -XX:+PrintGCDetails
  -XX:+PrintGCDateStamps
  -XX:+PrintGCTimeStamps
  -XX:+UseGCLogFileRotation
  -XX:NumberOfGCLogFiles=5
  -XX:GCLogFileSize=5M
  "
fi

#############################################################################

# Determine the Java command to use to start the JVM.
if [ "$OS" = "darwin" ]
  then
  if [ -z "$JAVA_HOME" ]; then
    if [ -x /usr/libexec/java_home ]; then
      JAVA_HOME=`/usr/libexec/java_home`; export JAVA_HOME
    else
      JAVA_HOME="/Library/Java/Home"; export JAVA_HOME
    fi
  fi
fi

if [ -n "$JAVA_HOME" ] ; then
  if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
    # IBM's JDK on AIX uses strange locations for the executables
    JAVA="$JAVA_HOME/jre/sh/java"
    JPS="$JAVA_HOME/jre/sh/jps"
    JMAP="$JAVA_HOME/jre/sh/jmap"
  else
    JAVA="$JAVA_HOME/bin/java"
    JPS="$JAVA_HOME/bin/jps"
    JMAP="$JAVA_HOME/bin/jmap"
  fi
  if [ ! -x "$JAVA" ] ; then
    die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

    Please set the JAVA_HOME variable in your environment to match the
    location of your Java installation."
  fi
else
  JAVA="java"
  JPS="jps"
  JMAP="jmap"
  which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

  Please set the JAVA_HOME variable in your environment to match the
  location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
  MAX_FD_LIMIT=`ulimit -H -n`
  if [ $? -eq 0 ] ; then
    if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
      MAX_FD="$MAX_FD_LIMIT"
    fi
    ulimit -n $MAX_FD
    if [ $? -ne 0 ] ; then
      warn "Could not set maximum file descriptor limit: $MAX_FD"
    fi
  else
    warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
  fi
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
  APP_HOME=`cygpath --path --mixed "$APP_HOME"`
  CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

  # We build the pattern for arguments to be converted via cygpath
  ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
  SEP=""
  for dir in $ROOTDIRSRAW ; do
    ROOTDIRS="$ROOTDIRS$SEP$dir"
    SEP="|"
  done
  OURCYGPATTERN="(^($ROOTDIRS))"
  # Add a user-defined pattern to the cygpath arguments
  if [ "$GRADLE_CYGPATTERN" != "" ] ; then
    OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
  fi
  # Now convert the arguments - kludge to limit ourselves to /bin/sh
  i=0
  for arg in "$@" ; do
    CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
    CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

    if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
      eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
    else
      eval `echo args$i`="\"$arg\""
    fi
    i=$((i+1))
  done
  case $i in
    (0) set -- ;;
    (1) set -- "$args0" ;;
    (2) set -- "$args0" "$args1" ;;
    (3) set -- "$args0" "$args1" "$args2" ;;
    (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
    (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
    (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
    (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
    (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
    (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
  esac
fi

# Function to print the usage message
usage(){
  cat <<< "Usage: $APP_HOME/bin/concourse [ console | start | stop | restart | status | threaddump | heapdump | version ]

  Commands:
  console       Launch in the current console.
  start         Start in the background as a daemon process.
  stop          Stop if running as a daemon or in another console.
  restart       Stop if running and then start.
  status        Query the current status.
  dump          [DEPRECATED] Request a thread dump if running.
  threaddump    Request a thread dump if running.
  heapdump      Request a heap dump if running.
  version       Display the Concourse Server version.
  help          Display this message.
  "
}

# Figure of the version of Concourse Server by checking the name of the jar in
# the $APP_HOME/lib directory
version(){
  local version=`ls $APP_HOME/lib | grep concourse-server | cut -d'-' -f3,4,5,6,7,8,9,10 | cut -d'.' -f1,2,3,4`
  echo $version
}

# Get the PID for the Concourse Server process
getpid(){
  local pid=`$JPS -v | grep "$APP_HOME_PROPERTY" | cut -d' ' -f1`
  if [ "X$pid" = "X" ]
    then
    rm $PIDFILE 2>/dev/null
  else
    echo $pid > $PIDFILE
  fi
  echo $pid
}

# Start Concourse Server as a daemon if it is not already running
start(){
  pid=`getpid`
  if [ "X$pid" = "X" ]
    then
    echo "Starting Concourse Server..."
    exec nohup $JAVA $JVMOPTS -classpath "$CLASSPATH" org.cinchapi.concourse.server.ConcourseServer "$@" >> log/console.log &
    startwait
  else
    echo "Concourse Server is already running (PID:$pid)"
    exit 1
  fi
}

# Start Concourse Server in the foreground of the current console if it is not
# already running
console(){
  pid=`getpid`
  if [ "X$pid" = "X" ]
    then
    echo "Running Concourse Server..."
    exec $JAVA $JVMOPTS -classpath "$CLASSPATH" org.cinchapi.concourse.server.ConcourseServer "$@"
  else
    echo "Concourse Server is already running (PID:$pid)"
    exit 1
  fi
}

# Take a thread dump of Concourse Server
threaddump(){
  echo "Requesting thread dump of Concourse Server..."
  pid=`getpid`
  if [ "X$pid" = "X" ]
    then
    die "Concourse Server is not running"
  else
    kill -3 $pid
    if [ $? -ne 0 ]
      then
      die "Failed to take thread dump of Concourse Server"
    else
      echo "Placed thread dump in the console log"
    fi
  fi
}

# Take a heap dump of Concourse Server using jmap
heapdump(){
  echo "Requesting heap dump of Concourse Server"
  pid=`getpid`
  if [ "X$pid" = "X" ]
    then
    die "Concourse Server is not running"
  else
    ts=`date +%Y-%m-%d_%H:%M:%S`
    file="$APP_HOME/log/concourse-server-$ts.hprof"
    $JMAP -dump:format=b,file=$file $pid
    if [ $? -ne 0 ]
      then
      die "Failed to take heap dump of Concourse Server"
    else
      echo "Placed heap dump in $file"
    fi
  fi
}

# Wait for Concourse Server to finish starting
startwait(){
  counter=15
  sleep 1
  pid=`getpid`
  while [ "X$pid" = "X" -a $counter -gt 0 ] ; do
    echo "."
    sleep 1
    pid=`getpid`
    counter=`expr $counter - 1`
  done
  if [ "X$pid" = "X" ]
    then
    die "ERROR: Concourse Server may have failed to start.
    Please check the console log for more details."
  else
    echo "running PID:$pid"
  fi
}

# Wait for Concourse Server to finish stopping
stopwait(){
  counter=15
  sleep 1
  pid=`getpid`
  while [ "X$pid" != "X" -a $counter -gt 0 ] ; do
    echo "."
    sleep 1
    pid=`getpid`
    counter=`expr $counter - 1`
  done
  if [ "X$pid" != "X" ]
    then
    die "ERROR: Concourse Server may have failed to stop.
    Please check the console log for more details."
  else
    echo "Stopped Concourse Server"
  fi
}

# Stop Concourse Server if it is running
stop(){
  pid=`getpid`
  if [ "X$pid" = "X" ]
    then
    echo "Concourse Server is not running."
  else
    echo "Stopping Concourse Server..."
    exec $JAVA -classpath "$CLASSPATH" org.cinchapi.concourse.server.ShutdownRunner "$@" &
    stopwait
  fi
}

# Check to see if Concourse Server is running or not
status(){
  pid=`getpid`
  if [ "X$pid" = "X" ]
    then
    echo "Concourse Server is not running."
  else
    echo "Concourse Server is running PID:$pid"
  fi
}

# MAIN: Ensure that we are in the correct directory and do the requested action.
cd $APP_HOME
case "$1" in
  'start' | '--start')
  start "$@"
  ;;

  'stop' | '--stop')
  stop "$@"
  ;;

  'console' | '--console')
  console "$@"
  ;;

  'dump' | 'threaddump' | 'tdump' | '--threaddump' | '--tdump')
  threaddump "$@"
  ;;

  'heapdump' | 'hdump' | '--heapdump' | '--hdump')
  heapdump "$@"
  ;;

  'status' | '--status')
  status "$@"
  ;;

  'restart' | '--restart')
  stop "$@"
  start "$@"
  ;;

  'version' | -[Vv] | '--version' | "-version")
  version=`version`
  echo "Concourse Server "$version
  echo "Copyright (c) 2015 Cinchapi, Inc."
  ;;

  *)
  usage "$@"
  ;;
esac

exit 0
