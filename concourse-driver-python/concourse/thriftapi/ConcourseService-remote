#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from concourse.thriftapi import ConcourseService
from concourse.thriftapi.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  AccessToken login(string username, string password, string environment)')
  print('  void logout(AccessToken token, string environment)')
  print('  TransactionToken stage(AccessToken token, string environment)')
  print('  void abort(AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool commit(AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool addKeyValueRecord(string key, TObject value, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  i64 addKeyValue(string key, TObject value, AccessToken creds, TransactionToken transaction, string environment)')
  print('   addKeyValueRecords(string key, TObject value,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void clearRecord(i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void clearRecords( records, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void clearKeyRecord(string key, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void clearKeysRecord( keys, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void clearKeyRecords(string key,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void clearKeysRecords( keys,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   insertJson(string json, AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool insertJsonRecord(string json, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   insertJsonRecords(string json,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool removeKeyValueRecord(string key, TObject value, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   removeKeyValueRecords(string key, TObject value,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void setKeyValueRecord(string key, TObject value, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  i64 setKeyValue(string key, TObject value, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void setKeyValueRecords(string key, TObject value,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   find(AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectRecord(i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectRecords( records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectRecordTime(i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectRecordsTime( records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   browseKey(string key, AccessToken creds, TransactionToken transaction, string environment)')
  print('   browseKeys( keys, AccessToken creds, TransactionToken transaction, string environment)')
  print('   browseKeyTime(string key, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   browseKeysTime( keys, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   describeRecord(i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   describeRecordTime(i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   describeRecords( records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   describeRecordsTime( records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyRecord(string key, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyRecordTime(string key, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysRecord( keys, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysRecordTime( keys, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysRecords( keys,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyRecords(string key,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyRecordsTime(string key,  records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysRecordsTime( keys,  records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectCriteria(TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectCcl(string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectCriteriaTime(TCriteria criteria, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectCclTime(string ccl, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyCriteria(string key, TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyCcl(string key, string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyCriteriaTime(string key, TCriteria criteria, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeyCclTime(string key, string ccl, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysCriteria( keys, TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysCcl( keys, string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysCriteriaTime( keys, TCriteria criteria, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   selectKeysCclTime( keys, string ccl, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('  TObject getKeyRecord(string key, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  TObject getKeyRecordTime(string key, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysRecord( keys, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysRecordTime( keys, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysRecords( keys,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeyRecords(string key,  records, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeyRecordsTime(string key,  records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysRecordsTime( keys,  records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeyCriteria(string key, TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getCriteria(TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getCcl(string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getCriteriaTime(TCriteria criteria, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getCclTime(string ccl, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeyCcl(string key, string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeyCriteriaTime(string key, TCriteria criteria, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeyCclTime(string key, string ccl, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysCriteria( keys, TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysCcl( keys, string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysCriteriaTime( keys, TCriteria criteria, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   getKeysCclTime( keys, string ccl, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool verifyKeyValueRecord(string key, TObject value, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool verifyKeyValueRecordTime(string key, TObject value, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('  string jsonifyRecords( records, bool identifier, AccessToken creds, TransactionToken transaction, string environment)')
  print('  string jsonifyRecordsTime( records, i64 timestamp, bool identifier, AccessToken creds, TransactionToken transaction, string environment)')
  print('   findCriteria(TCriteria criteria, AccessToken creds, TransactionToken transaction, string environment)')
  print('   findCcl(string ccl, AccessToken creds, TransactionToken transaction, string environment)')
  print('   findKeyOperatorValues(string key, Operator operator,  values, AccessToken creds, TransactionToken transaction, string environment)')
  print('   findKeyOperatorValuesTime(string key, Operator operator,  values, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   findKeyStringOperatorValues(string key, string operator,  values, AccessToken creds, TransactionToken transaction, string environment)')
  print('   findKeyStringOperatorValuesTime(string key, string operator,  values, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   search(string key, string query, AccessToken creds, TransactionToken transaction, string environment)')
  print('   auditRecord(i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   auditRecordStart(i64 record, i64 start, AccessToken creds, TransactionToken transaction, string environment)')
  print('   auditRecordStartEnd(i64 record, i64 start, i64 tend, AccessToken creds, TransactionToken transaction, string environment)')
  print('   auditKeyRecord(string key, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   auditKeyRecordStart(string key, i64 record, i64 start, AccessToken creds, TransactionToken transaction, string environment)')
  print('   auditKeyRecordStartEnd(string key, i64 record, i64 start, i64 tend, AccessToken creds, TransactionToken transaction, string environment)')
  print('   chronologizeKeyRecord(string key, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('   chronologizeKeyRecordStart(string key, i64 record, i64 start, AccessToken creds, TransactionToken transaction, string environment)')
  print('   chronologizeKeyRecordStartEnd(string key, i64 record, i64 start, i64 tend, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void revertKeysRecordsTime( keys,  records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void revertKeysRecordTime( keys, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void revertKeyRecordsTime(string key,  records, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void revertKeyRecordTime(string key, i64 record, i64 timestamp, AccessToken creds, TransactionToken transaction, string environment)')
  print('   pingRecords( records, AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool pingRecord(i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  bool verifyAndSwap(string key, TObject expected, i64 record, TObject replacement, AccessToken creds, TransactionToken transaction, string environment)')
  print('  void verifyOrSet(string key, TObject value, i64 record, AccessToken creds, TransactionToken transaction, string environment)')
  print('  string getServerEnvironment(AccessToken creds, TransactionToken token, string environment)')
  print('  string getServerVersion()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ConcourseService.Client(protocol)
transport.open()

if cmd == 'login':
  if len(args) != 3:
    print('login requires 3 args')
    sys.exit(1)
  pp.pprint(client.login(args[0],args[1],args[2],))

elif cmd == 'logout':
  if len(args) != 2:
    print('logout requires 2 args')
    sys.exit(1)
  pp.pprint(client.logout(eval(args[0]),args[1],))

elif cmd == 'stage':
  if len(args) != 2:
    print('stage requires 2 args')
    sys.exit(1)
  pp.pprint(client.stage(eval(args[0]),args[1],))

elif cmd == 'abort':
  if len(args) != 3:
    print('abort requires 3 args')
    sys.exit(1)
  pp.pprint(client.abort(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'commit':
  if len(args) != 3:
    print('commit requires 3 args')
    sys.exit(1)
  pp.pprint(client.commit(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'addKeyValueRecord':
  if len(args) != 6:
    print('addKeyValueRecord requires 6 args')
    sys.exit(1)
  pp.pprint(client.addKeyValueRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'addKeyValue':
  if len(args) != 5:
    print('addKeyValue requires 5 args')
    sys.exit(1)
  pp.pprint(client.addKeyValue(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'addKeyValueRecords':
  if len(args) != 6:
    print('addKeyValueRecords requires 6 args')
    sys.exit(1)
  pp.pprint(client.addKeyValueRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'clearRecord':
  if len(args) != 4:
    print('clearRecord requires 4 args')
    sys.exit(1)
  pp.pprint(client.clearRecord(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'clearRecords':
  if len(args) != 4:
    print('clearRecords requires 4 args')
    sys.exit(1)
  pp.pprint(client.clearRecords(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'clearKeyRecord':
  if len(args) != 5:
    print('clearKeyRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.clearKeyRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'clearKeysRecord':
  if len(args) != 5:
    print('clearKeysRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.clearKeysRecord(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'clearKeyRecords':
  if len(args) != 5:
    print('clearKeyRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.clearKeyRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'clearKeysRecords':
  if len(args) != 5:
    print('clearKeysRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.clearKeysRecords(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'insertJson':
  if len(args) != 4:
    print('insertJson requires 4 args')
    sys.exit(1)
  pp.pprint(client.insertJson(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'insertJsonRecord':
  if len(args) != 5:
    print('insertJsonRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.insertJsonRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'insertJsonRecords':
  if len(args) != 5:
    print('insertJsonRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.insertJsonRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'removeKeyValueRecord':
  if len(args) != 6:
    print('removeKeyValueRecord requires 6 args')
    sys.exit(1)
  pp.pprint(client.removeKeyValueRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'removeKeyValueRecords':
  if len(args) != 6:
    print('removeKeyValueRecords requires 6 args')
    sys.exit(1)
  pp.pprint(client.removeKeyValueRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'setKeyValueRecord':
  if len(args) != 6:
    print('setKeyValueRecord requires 6 args')
    sys.exit(1)
  pp.pprint(client.setKeyValueRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'setKeyValue':
  if len(args) != 5:
    print('setKeyValue requires 5 args')
    sys.exit(1)
  pp.pprint(client.setKeyValue(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'setKeyValueRecords':
  if len(args) != 6:
    print('setKeyValueRecords requires 6 args')
    sys.exit(1)
  pp.pprint(client.setKeyValueRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'find':
  if len(args) != 3:
    print('find requires 3 args')
    sys.exit(1)
  pp.pprint(client.find(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'selectRecord':
  if len(args) != 4:
    print('selectRecord requires 4 args')
    sys.exit(1)
  pp.pprint(client.selectRecord(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'selectRecords':
  if len(args) != 4:
    print('selectRecords requires 4 args')
    sys.exit(1)
  pp.pprint(client.selectRecords(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'selectRecordTime':
  if len(args) != 5:
    print('selectRecordTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectRecordTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectRecordsTime':
  if len(args) != 5:
    print('selectRecordsTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectRecordsTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'browseKey':
  if len(args) != 4:
    print('browseKey requires 4 args')
    sys.exit(1)
  pp.pprint(client.browseKey(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'browseKeys':
  if len(args) != 4:
    print('browseKeys requires 4 args')
    sys.exit(1)
  pp.pprint(client.browseKeys(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'browseKeyTime':
  if len(args) != 5:
    print('browseKeyTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.browseKeyTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'browseKeysTime':
  if len(args) != 5:
    print('browseKeysTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.browseKeysTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'describeRecord':
  if len(args) != 4:
    print('describeRecord requires 4 args')
    sys.exit(1)
  pp.pprint(client.describeRecord(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'describeRecordTime':
  if len(args) != 5:
    print('describeRecordTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.describeRecordTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'describeRecords':
  if len(args) != 4:
    print('describeRecords requires 4 args')
    sys.exit(1)
  pp.pprint(client.describeRecords(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'describeRecordsTime':
  if len(args) != 5:
    print('describeRecordsTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.describeRecordsTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyRecord':
  if len(args) != 5:
    print('selectKeyRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeyRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyRecordTime':
  if len(args) != 6:
    print('selectKeyRecordTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeyRecordTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectKeysRecord':
  if len(args) != 5:
    print('selectKeysRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeysRecord(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeysRecordTime':
  if len(args) != 6:
    print('selectKeysRecordTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeysRecordTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectKeysRecords':
  if len(args) != 5:
    print('selectKeysRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeysRecords(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyRecords':
  if len(args) != 5:
    print('selectKeyRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeyRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyRecordsTime':
  if len(args) != 6:
    print('selectKeyRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeyRecordsTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectKeysRecordsTime':
  if len(args) != 6:
    print('selectKeysRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeysRecordsTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectCriteria':
  if len(args) != 4:
    print('selectCriteria requires 4 args')
    sys.exit(1)
  pp.pprint(client.selectCriteria(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'selectCcl':
  if len(args) != 4:
    print('selectCcl requires 4 args')
    sys.exit(1)
  pp.pprint(client.selectCcl(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'selectCriteriaTime':
  if len(args) != 5:
    print('selectCriteriaTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectCriteriaTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectCclTime':
  if len(args) != 5:
    print('selectCclTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectCclTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyCriteria':
  if len(args) != 5:
    print('selectKeyCriteria requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeyCriteria(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyCcl':
  if len(args) != 5:
    print('selectKeyCcl requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeyCcl(args[0],args[1],eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeyCriteriaTime':
  if len(args) != 6:
    print('selectKeyCriteriaTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeyCriteriaTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectKeyCclTime':
  if len(args) != 6:
    print('selectKeyCclTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeyCclTime(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectKeysCriteria':
  if len(args) != 5:
    print('selectKeysCriteria requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeysCriteria(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeysCcl':
  if len(args) != 5:
    print('selectKeysCcl requires 5 args')
    sys.exit(1)
  pp.pprint(client.selectKeysCcl(eval(args[0]),args[1],eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'selectKeysCriteriaTime':
  if len(args) != 6:
    print('selectKeysCriteriaTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeysCriteriaTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'selectKeysCclTime':
  if len(args) != 6:
    print('selectKeysCclTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.selectKeysCclTime(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeyRecord':
  if len(args) != 5:
    print('getKeyRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeyRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeyRecordTime':
  if len(args) != 6:
    print('getKeyRecordTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeyRecordTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeysRecord':
  if len(args) != 5:
    print('getKeysRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeysRecord(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeysRecordTime':
  if len(args) != 6:
    print('getKeysRecordTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeysRecordTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeysRecords':
  if len(args) != 5:
    print('getKeysRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeysRecords(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeyRecords':
  if len(args) != 5:
    print('getKeyRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeyRecords(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeyRecordsTime':
  if len(args) != 6:
    print('getKeyRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeyRecordsTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeysRecordsTime':
  if len(args) != 6:
    print('getKeysRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeysRecordsTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeyCriteria':
  if len(args) != 5:
    print('getKeyCriteria requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeyCriteria(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getCriteria':
  if len(args) != 4:
    print('getCriteria requires 4 args')
    sys.exit(1)
  pp.pprint(client.getCriteria(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'getCcl':
  if len(args) != 4:
    print('getCcl requires 4 args')
    sys.exit(1)
  pp.pprint(client.getCcl(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'getCriteriaTime':
  if len(args) != 5:
    print('getCriteriaTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.getCriteriaTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getCclTime':
  if len(args) != 5:
    print('getCclTime requires 5 args')
    sys.exit(1)
  pp.pprint(client.getCclTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeyCcl':
  if len(args) != 5:
    print('getKeyCcl requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeyCcl(args[0],args[1],eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeyCriteriaTime':
  if len(args) != 6:
    print('getKeyCriteriaTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeyCriteriaTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeyCclTime':
  if len(args) != 6:
    print('getKeyCclTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeyCclTime(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeysCriteria':
  if len(args) != 5:
    print('getKeysCriteria requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeysCriteria(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeysCcl':
  if len(args) != 5:
    print('getKeysCcl requires 5 args')
    sys.exit(1)
  pp.pprint(client.getKeysCcl(eval(args[0]),args[1],eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'getKeysCriteriaTime':
  if len(args) != 6:
    print('getKeysCriteriaTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeysCriteriaTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getKeysCclTime':
  if len(args) != 6:
    print('getKeysCclTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.getKeysCclTime(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'verifyKeyValueRecord':
  if len(args) != 6:
    print('verifyKeyValueRecord requires 6 args')
    sys.exit(1)
  pp.pprint(client.verifyKeyValueRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'verifyKeyValueRecordTime':
  if len(args) != 7:
    print('verifyKeyValueRecordTime requires 7 args')
    sys.exit(1)
  pp.pprint(client.verifyKeyValueRecordTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'jsonifyRecords':
  if len(args) != 5:
    print('jsonifyRecords requires 5 args')
    sys.exit(1)
  pp.pprint(client.jsonifyRecords(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'jsonifyRecordsTime':
  if len(args) != 6:
    print('jsonifyRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.jsonifyRecordsTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'findCriteria':
  if len(args) != 4:
    print('findCriteria requires 4 args')
    sys.exit(1)
  pp.pprint(client.findCriteria(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'findCcl':
  if len(args) != 4:
    print('findCcl requires 4 args')
    sys.exit(1)
  pp.pprint(client.findCcl(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'findKeyOperatorValues':
  if len(args) != 6:
    print('findKeyOperatorValues requires 6 args')
    sys.exit(1)
  pp.pprint(client.findKeyOperatorValues(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'findKeyOperatorValuesTime':
  if len(args) != 7:
    print('findKeyOperatorValuesTime requires 7 args')
    sys.exit(1)
  pp.pprint(client.findKeyOperatorValuesTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'findKeyStringOperatorValues':
  if len(args) != 6:
    print('findKeyStringOperatorValues requires 6 args')
    sys.exit(1)
  pp.pprint(client.findKeyStringOperatorValues(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'findKeyStringOperatorValuesTime':
  if len(args) != 7:
    print('findKeyStringOperatorValuesTime requires 7 args')
    sys.exit(1)
  pp.pprint(client.findKeyStringOperatorValuesTime(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'search':
  if len(args) != 5:
    print('search requires 5 args')
    sys.exit(1)
  pp.pprint(client.search(args[0],args[1],eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'auditRecord':
  if len(args) != 4:
    print('auditRecord requires 4 args')
    sys.exit(1)
  pp.pprint(client.auditRecord(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'auditRecordStart':
  if len(args) != 5:
    print('auditRecordStart requires 5 args')
    sys.exit(1)
  pp.pprint(client.auditRecordStart(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'auditRecordStartEnd':
  if len(args) != 6:
    print('auditRecordStartEnd requires 6 args')
    sys.exit(1)
  pp.pprint(client.auditRecordStartEnd(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'auditKeyRecord':
  if len(args) != 5:
    print('auditKeyRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.auditKeyRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'auditKeyRecordStart':
  if len(args) != 6:
    print('auditKeyRecordStart requires 6 args')
    sys.exit(1)
  pp.pprint(client.auditKeyRecordStart(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'auditKeyRecordStartEnd':
  if len(args) != 7:
    print('auditKeyRecordStartEnd requires 7 args')
    sys.exit(1)
  pp.pprint(client.auditKeyRecordStartEnd(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'chronologizeKeyRecord':
  if len(args) != 5:
    print('chronologizeKeyRecord requires 5 args')
    sys.exit(1)
  pp.pprint(client.chronologizeKeyRecord(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'chronologizeKeyRecordStart':
  if len(args) != 6:
    print('chronologizeKeyRecordStart requires 6 args')
    sys.exit(1)
  pp.pprint(client.chronologizeKeyRecordStart(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'chronologizeKeyRecordStartEnd':
  if len(args) != 7:
    print('chronologizeKeyRecordStartEnd requires 7 args')
    sys.exit(1)
  pp.pprint(client.chronologizeKeyRecordStartEnd(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'revertKeysRecordsTime':
  if len(args) != 6:
    print('revertKeysRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.revertKeysRecordsTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'revertKeysRecordTime':
  if len(args) != 6:
    print('revertKeysRecordTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.revertKeysRecordTime(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'revertKeyRecordsTime':
  if len(args) != 6:
    print('revertKeyRecordsTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.revertKeyRecordsTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'revertKeyRecordTime':
  if len(args) != 6:
    print('revertKeyRecordTime requires 6 args')
    sys.exit(1)
  pp.pprint(client.revertKeyRecordTime(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'pingRecords':
  if len(args) != 4:
    print('pingRecords requires 4 args')
    sys.exit(1)
  pp.pprint(client.pingRecords(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'pingRecord':
  if len(args) != 4:
    print('pingRecord requires 4 args')
    sys.exit(1)
  pp.pprint(client.pingRecord(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'verifyAndSwap':
  if len(args) != 7:
    print('verifyAndSwap requires 7 args')
    sys.exit(1)
  pp.pprint(client.verifyAndSwap(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'verifyOrSet':
  if len(args) != 6:
    print('verifyOrSet requires 6 args')
    sys.exit(1)
  pp.pprint(client.verifyOrSet(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),args[5],))

elif cmd == 'getServerEnvironment':
  if len(args) != 3:
    print('getServerEnvironment requires 3 args')
    sys.exit(1)
  pp.pprint(client.getServerEnvironment(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'getServerVersion':
  if len(args) != 0:
    print('getServerVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServerVersion())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
