#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'concourse_types'

module ConcourseService
  class Client
    include ::Thrift::Client

    def login(username, password, environment)
      send_login(username, password, environment)
      return recv_login()
    end

    def send_login(username, password, environment)
      send_message('login', Login_args, :username => username, :password => password, :environment => environment)
    end

    def recv_login()
      result = receive_message(Login_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'login failed: unknown result')
    end

    def logout(token, environment)
      send_logout(token, environment)
      recv_logout()
    end

    def send_logout(token, environment)
      send_message('logout', Logout_args, :token => token, :environment => environment)
    end

    def recv_logout()
      result = receive_message(Logout_result)
      raise result.ex unless result.ex.nil?
      return
    end

    def stage(token, environment)
      send_stage(token, environment)
      return recv_stage()
    end

    def send_stage(token, environment)
      send_message('stage', Stage_args, :token => token, :environment => environment)
    end

    def recv_stage()
      result = receive_message(Stage_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'stage failed: unknown result')
    end

    def abort(creds, transaction, environment)
      send_abort(creds, transaction, environment)
      recv_abort()
    end

    def send_abort(creds, transaction, environment)
      send_message('abort', Abort_args, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_abort()
      result = receive_message(Abort_result)
      raise result.ex unless result.ex.nil?
      return
    end

    def commit(creds, transaction, environment)
      send_commit(creds, transaction, environment)
      return recv_commit()
    end

    def send_commit(creds, transaction, environment)
      send_message('commit', Commit_args, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_commit()
      result = receive_message(Commit_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'commit failed: unknown result')
    end

    def addKeyValueRecord(key, value, record, creds, transaction, environment)
      send_addKeyValueRecord(key, value, record, creds, transaction, environment)
      return recv_addKeyValueRecord()
    end

    def send_addKeyValueRecord(key, value, record, creds, transaction, environment)
      send_message('addKeyValueRecord', AddKeyValueRecord_args, :key => key, :value => value, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_addKeyValueRecord()
      result = receive_message(AddKeyValueRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addKeyValueRecord failed: unknown result')
    end

    def addKeyValue(key, value, creds, transaction, environment)
      send_addKeyValue(key, value, creds, transaction, environment)
      return recv_addKeyValue()
    end

    def send_addKeyValue(key, value, creds, transaction, environment)
      send_message('addKeyValue', AddKeyValue_args, :key => key, :value => value, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_addKeyValue()
      result = receive_message(AddKeyValue_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addKeyValue failed: unknown result')
    end

    def addKeyValueRecords(key, value, records, creds, transaction, environment)
      send_addKeyValueRecords(key, value, records, creds, transaction, environment)
      return recv_addKeyValueRecords()
    end

    def send_addKeyValueRecords(key, value, records, creds, transaction, environment)
      send_message('addKeyValueRecords', AddKeyValueRecords_args, :key => key, :value => value, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_addKeyValueRecords()
      result = receive_message(AddKeyValueRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addKeyValueRecords failed: unknown result')
    end

    def clearRecord(record, creds, transaction, environment)
      send_clearRecord(record, creds, transaction, environment)
      recv_clearRecord()
    end

    def send_clearRecord(record, creds, transaction, environment)
      send_message('clearRecord', ClearRecord_args, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_clearRecord()
      result = receive_message(ClearRecord_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def clearRecords(records, creds, transaction, environment)
      send_clearRecords(records, creds, transaction, environment)
      recv_clearRecords()
    end

    def send_clearRecords(records, creds, transaction, environment)
      send_message('clearRecords', ClearRecords_args, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_clearRecords()
      result = receive_message(ClearRecords_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def clearKeyRecord(key, record, creds, transaction, environment)
      send_clearKeyRecord(key, record, creds, transaction, environment)
      recv_clearKeyRecord()
    end

    def send_clearKeyRecord(key, record, creds, transaction, environment)
      send_message('clearKeyRecord', ClearKeyRecord_args, :key => key, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_clearKeyRecord()
      result = receive_message(ClearKeyRecord_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def clearKeysRecord(keys, record, creds, transaction, environment)
      send_clearKeysRecord(keys, record, creds, transaction, environment)
      recv_clearKeysRecord()
    end

    def send_clearKeysRecord(keys, record, creds, transaction, environment)
      send_message('clearKeysRecord', ClearKeysRecord_args, :keys => keys, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_clearKeysRecord()
      result = receive_message(ClearKeysRecord_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def clearKeyRecords(key, records, creds, transaction, environment)
      send_clearKeyRecords(key, records, creds, transaction, environment)
      recv_clearKeyRecords()
    end

    def send_clearKeyRecords(key, records, creds, transaction, environment)
      send_message('clearKeyRecords', ClearKeyRecords_args, :key => key, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_clearKeyRecords()
      result = receive_message(ClearKeyRecords_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def clearKeysRecords(keys, records, creds, transaction, environment)
      send_clearKeysRecords(keys, records, creds, transaction, environment)
      recv_clearKeysRecords()
    end

    def send_clearKeysRecords(keys, records, creds, transaction, environment)
      send_message('clearKeysRecords', ClearKeysRecords_args, :keys => keys, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_clearKeysRecords()
      result = receive_message(ClearKeysRecords_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def insertJson(json, creds, transaction, environment)
      send_insertJson(json, creds, transaction, environment)
      return recv_insertJson()
    end

    def send_insertJson(json, creds, transaction, environment)
      send_message('insertJson', InsertJson_args, :json => json, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_insertJson()
      result = receive_message(InsertJson_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertJson failed: unknown result')
    end

    def insertJsonRecord(json, record, creds, transaction, environment)
      send_insertJsonRecord(json, record, creds, transaction, environment)
      return recv_insertJsonRecord()
    end

    def send_insertJsonRecord(json, record, creds, transaction, environment)
      send_message('insertJsonRecord', InsertJsonRecord_args, :json => json, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_insertJsonRecord()
      result = receive_message(InsertJsonRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertJsonRecord failed: unknown result')
    end

    def insertJsonRecords(json, records, creds, transaction, environment)
      send_insertJsonRecords(json, records, creds, transaction, environment)
      return recv_insertJsonRecords()
    end

    def send_insertJsonRecords(json, records, creds, transaction, environment)
      send_message('insertJsonRecords', InsertJsonRecords_args, :json => json, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_insertJsonRecords()
      result = receive_message(InsertJsonRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertJsonRecords failed: unknown result')
    end

    def removeKeyValueRecord(key, value, record, creds, transaction, environment)
      send_removeKeyValueRecord(key, value, record, creds, transaction, environment)
      return recv_removeKeyValueRecord()
    end

    def send_removeKeyValueRecord(key, value, record, creds, transaction, environment)
      send_message('removeKeyValueRecord', RemoveKeyValueRecord_args, :key => key, :value => value, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_removeKeyValueRecord()
      result = receive_message(RemoveKeyValueRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeKeyValueRecord failed: unknown result')
    end

    def removeKeyValueRecords(key, value, records, creds, transaction, environment)
      send_removeKeyValueRecords(key, value, records, creds, transaction, environment)
      return recv_removeKeyValueRecords()
    end

    def send_removeKeyValueRecords(key, value, records, creds, transaction, environment)
      send_message('removeKeyValueRecords', RemoveKeyValueRecords_args, :key => key, :value => value, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_removeKeyValueRecords()
      result = receive_message(RemoveKeyValueRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeKeyValueRecords failed: unknown result')
    end

    def setKeyValueRecord(key, value, record, creds, transaction, environment)
      send_setKeyValueRecord(key, value, record, creds, transaction, environment)
      recv_setKeyValueRecord()
    end

    def send_setKeyValueRecord(key, value, record, creds, transaction, environment)
      send_message('setKeyValueRecord', SetKeyValueRecord_args, :key => key, :value => value, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_setKeyValueRecord()
      result = receive_message(SetKeyValueRecord_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def setKeyValue(key, value, creds, transaction, environment)
      send_setKeyValue(key, value, creds, transaction, environment)
      return recv_setKeyValue()
    end

    def send_setKeyValue(key, value, creds, transaction, environment)
      send_message('setKeyValue', SetKeyValue_args, :key => key, :value => value, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_setKeyValue()
      result = receive_message(SetKeyValue_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setKeyValue failed: unknown result')
    end

    def setKeyValueRecords(key, value, records, creds, transaction, environment)
      send_setKeyValueRecords(key, value, records, creds, transaction, environment)
      recv_setKeyValueRecords()
    end

    def send_setKeyValueRecords(key, value, records, creds, transaction, environment)
      send_message('setKeyValueRecords', SetKeyValueRecords_args, :key => key, :value => value, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_setKeyValueRecords()
      result = receive_message(SetKeyValueRecords_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def find(creds, transaction, environment)
      send_find(creds, transaction, environment)
      return recv_find()
    end

    def send_find(creds, transaction, environment)
      send_message('find', Find_args, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_find()
      result = receive_message(Find_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find failed: unknown result')
    end

    def selectRecord(record, creds, transaction, environment)
      send_selectRecord(record, creds, transaction, environment)
      return recv_selectRecord()
    end

    def send_selectRecord(record, creds, transaction, environment)
      send_message('selectRecord', SelectRecord_args, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectRecord()
      result = receive_message(SelectRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectRecord failed: unknown result')
    end

    def selectRecords(records, creds, transaction, environment)
      send_selectRecords(records, creds, transaction, environment)
      return recv_selectRecords()
    end

    def send_selectRecords(records, creds, transaction, environment)
      send_message('selectRecords', SelectRecords_args, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectRecords()
      result = receive_message(SelectRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectRecords failed: unknown result')
    end

    def selectRecordTime(record, timestamp, creds, transaction, environment)
      send_selectRecordTime(record, timestamp, creds, transaction, environment)
      return recv_selectRecordTime()
    end

    def send_selectRecordTime(record, timestamp, creds, transaction, environment)
      send_message('selectRecordTime', SelectRecordTime_args, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectRecordTime()
      result = receive_message(SelectRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectRecordTime failed: unknown result')
    end

    def selectRecordsTime(records, timestamp, creds, transaction, environment)
      send_selectRecordsTime(records, timestamp, creds, transaction, environment)
      return recv_selectRecordsTime()
    end

    def send_selectRecordsTime(records, timestamp, creds, transaction, environment)
      send_message('selectRecordsTime', SelectRecordsTime_args, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectRecordsTime()
      result = receive_message(SelectRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectRecordsTime failed: unknown result')
    end

    def browseKey(key, creds, transaction, environment)
      send_browseKey(key, creds, transaction, environment)
      return recv_browseKey()
    end

    def send_browseKey(key, creds, transaction, environment)
      send_message('browseKey', BrowseKey_args, :key => key, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_browseKey()
      result = receive_message(BrowseKey_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'browseKey failed: unknown result')
    end

    def browseKeys(keys, creds, transaction, environment)
      send_browseKeys(keys, creds, transaction, environment)
      return recv_browseKeys()
    end

    def send_browseKeys(keys, creds, transaction, environment)
      send_message('browseKeys', BrowseKeys_args, :keys => keys, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_browseKeys()
      result = receive_message(BrowseKeys_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'browseKeys failed: unknown result')
    end

    def browseKeyTime(key, timestamp, creds, transaction, environment)
      send_browseKeyTime(key, timestamp, creds, transaction, environment)
      return recv_browseKeyTime()
    end

    def send_browseKeyTime(key, timestamp, creds, transaction, environment)
      send_message('browseKeyTime', BrowseKeyTime_args, :key => key, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_browseKeyTime()
      result = receive_message(BrowseKeyTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'browseKeyTime failed: unknown result')
    end

    def browseKeysTime(keys, timestamp, creds, transaction, environment)
      send_browseKeysTime(keys, timestamp, creds, transaction, environment)
      return recv_browseKeysTime()
    end

    def send_browseKeysTime(keys, timestamp, creds, transaction, environment)
      send_message('browseKeysTime', BrowseKeysTime_args, :keys => keys, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_browseKeysTime()
      result = receive_message(BrowseKeysTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'browseKeysTime failed: unknown result')
    end

    def describeRecord(record, creds, transaction, environment)
      send_describeRecord(record, creds, transaction, environment)
      return recv_describeRecord()
    end

    def send_describeRecord(record, creds, transaction, environment)
      send_message('describeRecord', DescribeRecord_args, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_describeRecord()
      result = receive_message(DescribeRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'describeRecord failed: unknown result')
    end

    def describeRecordTime(record, timestamp, creds, transaction, environment)
      send_describeRecordTime(record, timestamp, creds, transaction, environment)
      return recv_describeRecordTime()
    end

    def send_describeRecordTime(record, timestamp, creds, transaction, environment)
      send_message('describeRecordTime', DescribeRecordTime_args, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_describeRecordTime()
      result = receive_message(DescribeRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'describeRecordTime failed: unknown result')
    end

    def describeRecords(records, creds, transaction, environment)
      send_describeRecords(records, creds, transaction, environment)
      return recv_describeRecords()
    end

    def send_describeRecords(records, creds, transaction, environment)
      send_message('describeRecords', DescribeRecords_args, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_describeRecords()
      result = receive_message(DescribeRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'describeRecords failed: unknown result')
    end

    def describeRecordsTime(records, timestamp, creds, transaction, environment)
      send_describeRecordsTime(records, timestamp, creds, transaction, environment)
      return recv_describeRecordsTime()
    end

    def send_describeRecordsTime(records, timestamp, creds, transaction, environment)
      send_message('describeRecordsTime', DescribeRecordsTime_args, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_describeRecordsTime()
      result = receive_message(DescribeRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'describeRecordsTime failed: unknown result')
    end

    def selectKeyRecord(key, record, creds, transaction, environment)
      send_selectKeyRecord(key, record, creds, transaction, environment)
      return recv_selectKeyRecord()
    end

    def send_selectKeyRecord(key, record, creds, transaction, environment)
      send_message('selectKeyRecord', SelectKeyRecord_args, :key => key, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyRecord()
      result = receive_message(SelectKeyRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyRecord failed: unknown result')
    end

    def selectKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      return recv_selectKeyRecordTime()
    end

    def send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      send_message('selectKeyRecordTime', SelectKeyRecordTime_args, :key => key, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyRecordTime()
      result = receive_message(SelectKeyRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyRecordTime failed: unknown result')
    end

    def selectKeysRecord(keys, record, creds, transaction, environment)
      send_selectKeysRecord(keys, record, creds, transaction, environment)
      return recv_selectKeysRecord()
    end

    def send_selectKeysRecord(keys, record, creds, transaction, environment)
      send_message('selectKeysRecord', SelectKeysRecord_args, :keys => keys, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysRecord()
      result = receive_message(SelectKeysRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysRecord failed: unknown result')
    end

    def selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      return recv_selectKeysRecordTime()
    end

    def send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      send_message('selectKeysRecordTime', SelectKeysRecordTime_args, :keys => keys, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysRecordTime()
      result = receive_message(SelectKeysRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysRecordTime failed: unknown result')
    end

    def selectKeysRecords(keys, records, creds, transaction, environment)
      send_selectKeysRecords(keys, records, creds, transaction, environment)
      return recv_selectKeysRecords()
    end

    def send_selectKeysRecords(keys, records, creds, transaction, environment)
      send_message('selectKeysRecords', SelectKeysRecords_args, :keys => keys, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysRecords()
      result = receive_message(SelectKeysRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysRecords failed: unknown result')
    end

    def selectKeyRecords(key, records, creds, transaction, environment)
      send_selectKeyRecords(key, records, creds, transaction, environment)
      return recv_selectKeyRecords()
    end

    def send_selectKeyRecords(key, records, creds, transaction, environment)
      send_message('selectKeyRecords', SelectKeyRecords_args, :key => key, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyRecords()
      result = receive_message(SelectKeyRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyRecords failed: unknown result')
    end

    def selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      return recv_selectKeyRecordsTime()
    end

    def send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      send_message('selectKeyRecordsTime', SelectKeyRecordsTime_args, :key => key, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyRecordsTime()
      result = receive_message(SelectKeyRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyRecordsTime failed: unknown result')
    end

    def selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      return recv_selectKeysRecordsTime()
    end

    def send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      send_message('selectKeysRecordsTime', SelectKeysRecordsTime_args, :keys => keys, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysRecordsTime()
      result = receive_message(SelectKeysRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysRecordsTime failed: unknown result')
    end

    def selectCriteria(criteria, creds, transaction, environment)
      send_selectCriteria(criteria, creds, transaction, environment)
      return recv_selectCriteria()
    end

    def send_selectCriteria(criteria, creds, transaction, environment)
      send_message('selectCriteria', SelectCriteria_args, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectCriteria()
      result = receive_message(SelectCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectCriteria failed: unknown result')
    end

    def selectCcl(ccl, creds, transaction, environment)
      send_selectCcl(ccl, creds, transaction, environment)
      return recv_selectCcl()
    end

    def send_selectCcl(ccl, creds, transaction, environment)
      send_message('selectCcl', SelectCcl_args, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectCcl()
      result = receive_message(SelectCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectCcl failed: unknown result')
    end

    def selectCriteriaTime(criteria, timestamp, creds, transaction, environment)
      send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment)
      return recv_selectCriteriaTime()
    end

    def send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment)
      send_message('selectCriteriaTime', SelectCriteriaTime_args, :criteria => criteria, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectCriteriaTime()
      result = receive_message(SelectCriteriaTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectCriteriaTime failed: unknown result')
    end

    def selectCclTime(ccl, timestamp, creds, transaction, environment)
      send_selectCclTime(ccl, timestamp, creds, transaction, environment)
      return recv_selectCclTime()
    end

    def send_selectCclTime(ccl, timestamp, creds, transaction, environment)
      send_message('selectCclTime', SelectCclTime_args, :ccl => ccl, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectCclTime()
      result = receive_message(SelectCclTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectCclTime failed: unknown result')
    end

    def selectKeyCriteria(key, criteria, creds, transaction, environment)
      send_selectKeyCriteria(key, criteria, creds, transaction, environment)
      return recv_selectKeyCriteria()
    end

    def send_selectKeyCriteria(key, criteria, creds, transaction, environment)
      send_message('selectKeyCriteria', SelectKeyCriteria_args, :key => key, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyCriteria()
      result = receive_message(SelectKeyCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyCriteria failed: unknown result')
    end

    def selectKeyCcl(key, ccl, creds, transaction, environment)
      send_selectKeyCcl(key, ccl, creds, transaction, environment)
      return recv_selectKeyCcl()
    end

    def send_selectKeyCcl(key, ccl, creds, transaction, environment)
      send_message('selectKeyCcl', SelectKeyCcl_args, :key => key, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyCcl()
      result = receive_message(SelectKeyCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyCcl failed: unknown result')
    end

    def selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
      send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
      return recv_selectKeyCriteriaTime()
    end

    def send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
      send_message('selectKeyCriteriaTime', SelectKeyCriteriaTime_args, :key => key, :criteria => criteria, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyCriteriaTime()
      result = receive_message(SelectKeyCriteriaTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyCriteriaTime failed: unknown result')
    end

    def selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
      send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
      return recv_selectKeyCclTime()
    end

    def send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
      send_message('selectKeyCclTime', SelectKeyCclTime_args, :key => key, :ccl => ccl, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeyCclTime()
      result = receive_message(SelectKeyCclTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeyCclTime failed: unknown result')
    end

    def selectKeysCriteria(keys, criteria, creds, transaction, environment)
      send_selectKeysCriteria(keys, criteria, creds, transaction, environment)
      return recv_selectKeysCriteria()
    end

    def send_selectKeysCriteria(keys, criteria, creds, transaction, environment)
      send_message('selectKeysCriteria', SelectKeysCriteria_args, :keys => keys, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysCriteria()
      result = receive_message(SelectKeysCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysCriteria failed: unknown result')
    end

    def selectKeysCcl(keys, ccl, creds, transaction, environment)
      send_selectKeysCcl(keys, ccl, creds, transaction, environment)
      return recv_selectKeysCcl()
    end

    def send_selectKeysCcl(keys, ccl, creds, transaction, environment)
      send_message('selectKeysCcl', SelectKeysCcl_args, :keys => keys, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysCcl()
      result = receive_message(SelectKeysCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysCcl failed: unknown result')
    end

    def selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
      send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
      return recv_selectKeysCriteriaTime()
    end

    def send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
      send_message('selectKeysCriteriaTime', SelectKeysCriteriaTime_args, :keys => keys, :criteria => criteria, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysCriteriaTime()
      result = receive_message(SelectKeysCriteriaTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysCriteriaTime failed: unknown result')
    end

    def selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
      send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
      return recv_selectKeysCclTime()
    end

    def send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
      send_message('selectKeysCclTime', SelectKeysCclTime_args, :keys => keys, :ccl => ccl, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_selectKeysCclTime()
      result = receive_message(SelectKeysCclTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'selectKeysCclTime failed: unknown result')
    end

    def getKeyRecord(key, record, creds, transaction, environment)
      send_getKeyRecord(key, record, creds, transaction, environment)
      return recv_getKeyRecord()
    end

    def send_getKeyRecord(key, record, creds, transaction, environment)
      send_message('getKeyRecord', GetKeyRecord_args, :key => key, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyRecord()
      result = receive_message(GetKeyRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyRecord failed: unknown result')
    end

    def getKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      return recv_getKeyRecordTime()
    end

    def send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      send_message('getKeyRecordTime', GetKeyRecordTime_args, :key => key, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyRecordTime()
      result = receive_message(GetKeyRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyRecordTime failed: unknown result')
    end

    def getKeysRecord(keys, record, creds, transaction, environment)
      send_getKeysRecord(keys, record, creds, transaction, environment)
      return recv_getKeysRecord()
    end

    def send_getKeysRecord(keys, record, creds, transaction, environment)
      send_message('getKeysRecord', GetKeysRecord_args, :keys => keys, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysRecord()
      result = receive_message(GetKeysRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysRecord failed: unknown result')
    end

    def getKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      return recv_getKeysRecordTime()
    end

    def send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      send_message('getKeysRecordTime', GetKeysRecordTime_args, :keys => keys, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysRecordTime()
      result = receive_message(GetKeysRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysRecordTime failed: unknown result')
    end

    def getKeysRecords(keys, records, creds, transaction, environment)
      send_getKeysRecords(keys, records, creds, transaction, environment)
      return recv_getKeysRecords()
    end

    def send_getKeysRecords(keys, records, creds, transaction, environment)
      send_message('getKeysRecords', GetKeysRecords_args, :keys => keys, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysRecords()
      result = receive_message(GetKeysRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysRecords failed: unknown result')
    end

    def getKeyRecords(key, records, creds, transaction, environment)
      send_getKeyRecords(key, records, creds, transaction, environment)
      return recv_getKeyRecords()
    end

    def send_getKeyRecords(key, records, creds, transaction, environment)
      send_message('getKeyRecords', GetKeyRecords_args, :key => key, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyRecords()
      result = receive_message(GetKeyRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyRecords failed: unknown result')
    end

    def getKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      return recv_getKeyRecordsTime()
    end

    def send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      send_message('getKeyRecordsTime', GetKeyRecordsTime_args, :key => key, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyRecordsTime()
      result = receive_message(GetKeyRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyRecordsTime failed: unknown result')
    end

    def getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      return recv_getKeysRecordsTime()
    end

    def send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      send_message('getKeysRecordsTime', GetKeysRecordsTime_args, :keys => keys, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysRecordsTime()
      result = receive_message(GetKeysRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysRecordsTime failed: unknown result')
    end

    def getKeyCriteria(key, criteria, creds, transaction, environment)
      send_getKeyCriteria(key, criteria, creds, transaction, environment)
      return recv_getKeyCriteria()
    end

    def send_getKeyCriteria(key, criteria, creds, transaction, environment)
      send_message('getKeyCriteria', GetKeyCriteria_args, :key => key, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyCriteria()
      result = receive_message(GetKeyCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyCriteria failed: unknown result')
    end

    def getCriteria(criteria, creds, transaction, environment)
      send_getCriteria(criteria, creds, transaction, environment)
      return recv_getCriteria()
    end

    def send_getCriteria(criteria, creds, transaction, environment)
      send_message('getCriteria', GetCriteria_args, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getCriteria()
      result = receive_message(GetCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCriteria failed: unknown result')
    end

    def getCcl(ccl, creds, transaction, environment)
      send_getCcl(ccl, creds, transaction, environment)
      return recv_getCcl()
    end

    def send_getCcl(ccl, creds, transaction, environment)
      send_message('getCcl', GetCcl_args, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getCcl()
      result = receive_message(GetCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCcl failed: unknown result')
    end

    def getCriteriaTime(criteria, timestamp, creds, transaction, environment)
      send_getCriteriaTime(criteria, timestamp, creds, transaction, environment)
      return recv_getCriteriaTime()
    end

    def send_getCriteriaTime(criteria, timestamp, creds, transaction, environment)
      send_message('getCriteriaTime', GetCriteriaTime_args, :criteria => criteria, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getCriteriaTime()
      result = receive_message(GetCriteriaTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCriteriaTime failed: unknown result')
    end

    def getCclTime(ccl, timestamp, creds, transaction, environment)
      send_getCclTime(ccl, timestamp, creds, transaction, environment)
      return recv_getCclTime()
    end

    def send_getCclTime(ccl, timestamp, creds, transaction, environment)
      send_message('getCclTime', GetCclTime_args, :ccl => ccl, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getCclTime()
      result = receive_message(GetCclTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCclTime failed: unknown result')
    end

    def getKeyCcl(key, ccl, creds, transaction, environment)
      send_getKeyCcl(key, ccl, creds, transaction, environment)
      return recv_getKeyCcl()
    end

    def send_getKeyCcl(key, ccl, creds, transaction, environment)
      send_message('getKeyCcl', GetKeyCcl_args, :key => key, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyCcl()
      result = receive_message(GetKeyCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyCcl failed: unknown result')
    end

    def getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
      send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
      return recv_getKeyCriteriaTime()
    end

    def send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
      send_message('getKeyCriteriaTime', GetKeyCriteriaTime_args, :key => key, :criteria => criteria, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyCriteriaTime()
      result = receive_message(GetKeyCriteriaTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyCriteriaTime failed: unknown result')
    end

    def getKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
      send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
      return recv_getKeyCclTime()
    end

    def send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
      send_message('getKeyCclTime', GetKeyCclTime_args, :key => key, :ccl => ccl, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeyCclTime()
      result = receive_message(GetKeyCclTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeyCclTime failed: unknown result')
    end

    def getKeysCriteria(keys, criteria, creds, transaction, environment)
      send_getKeysCriteria(keys, criteria, creds, transaction, environment)
      return recv_getKeysCriteria()
    end

    def send_getKeysCriteria(keys, criteria, creds, transaction, environment)
      send_message('getKeysCriteria', GetKeysCriteria_args, :keys => keys, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysCriteria()
      result = receive_message(GetKeysCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysCriteria failed: unknown result')
    end

    def getKeysCcl(keys, ccl, creds, transaction, environment)
      send_getKeysCcl(keys, ccl, creds, transaction, environment)
      return recv_getKeysCcl()
    end

    def send_getKeysCcl(keys, ccl, creds, transaction, environment)
      send_message('getKeysCcl', GetKeysCcl_args, :keys => keys, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysCcl()
      result = receive_message(GetKeysCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysCcl failed: unknown result')
    end

    def getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
      send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
      return recv_getKeysCriteriaTime()
    end

    def send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
      send_message('getKeysCriteriaTime', GetKeysCriteriaTime_args, :keys => keys, :criteria => criteria, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysCriteriaTime()
      result = receive_message(GetKeysCriteriaTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysCriteriaTime failed: unknown result')
    end

    def getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
      send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
      return recv_getKeysCclTime()
    end

    def send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
      send_message('getKeysCclTime', GetKeysCclTime_args, :keys => keys, :ccl => ccl, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_getKeysCclTime()
      result = receive_message(GetKeysCclTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getKeysCclTime failed: unknown result')
    end

    def verifyKeyValueRecord(key, value, record, creds, transaction, environment)
      send_verifyKeyValueRecord(key, value, record, creds, transaction, environment)
      return recv_verifyKeyValueRecord()
    end

    def send_verifyKeyValueRecord(key, value, record, creds, transaction, environment)
      send_message('verifyKeyValueRecord', VerifyKeyValueRecord_args, :key => key, :value => value, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_verifyKeyValueRecord()
      result = receive_message(VerifyKeyValueRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyKeyValueRecord failed: unknown result')
    end

    def verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment)
      send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment)
      return recv_verifyKeyValueRecordTime()
    end

    def send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment)
      send_message('verifyKeyValueRecordTime', VerifyKeyValueRecordTime_args, :key => key, :value => value, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_verifyKeyValueRecordTime()
      result = receive_message(VerifyKeyValueRecordTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyKeyValueRecordTime failed: unknown result')
    end

    def jsonifyRecords(records, identifier, creds, transaction, environment)
      send_jsonifyRecords(records, identifier, creds, transaction, environment)
      return recv_jsonifyRecords()
    end

    def send_jsonifyRecords(records, identifier, creds, transaction, environment)
      send_message('jsonifyRecords', JsonifyRecords_args, :records => records, :identifier => identifier, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_jsonifyRecords()
      result = receive_message(JsonifyRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'jsonifyRecords failed: unknown result')
    end

    def jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment)
      send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment)
      return recv_jsonifyRecordsTime()
    end

    def send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment)
      send_message('jsonifyRecordsTime', JsonifyRecordsTime_args, :records => records, :timestamp => timestamp, :identifier => identifier, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_jsonifyRecordsTime()
      result = receive_message(JsonifyRecordsTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'jsonifyRecordsTime failed: unknown result')
    end

    def findCriteria(criteria, creds, transaction, environment)
      send_findCriteria(criteria, creds, transaction, environment)
      return recv_findCriteria()
    end

    def send_findCriteria(criteria, creds, transaction, environment)
      send_message('findCriteria', FindCriteria_args, :criteria => criteria, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_findCriteria()
      result = receive_message(FindCriteria_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findCriteria failed: unknown result')
    end

    def findCcl(ccl, creds, transaction, environment)
      send_findCcl(ccl, creds, transaction, environment)
      return recv_findCcl()
    end

    def send_findCcl(ccl, creds, transaction, environment)
      send_message('findCcl', FindCcl_args, :ccl => ccl, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_findCcl()
      result = receive_message(FindCcl_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise result.ex3 unless result.ex3.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findCcl failed: unknown result')
    end

    def findKeyOperatorValues(key, operator, values, creds, transaction, environment)
      send_findKeyOperatorValues(key, operator, values, creds, transaction, environment)
      return recv_findKeyOperatorValues()
    end

    def send_findKeyOperatorValues(key, operator, values, creds, transaction, environment)
      send_message('findKeyOperatorValues', FindKeyOperatorValues_args, :key => key, :operator => operator, :values => values, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_findKeyOperatorValues()
      result = receive_message(FindKeyOperatorValues_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findKeyOperatorValues failed: unknown result')
    end

    def findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
      send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
      return recv_findKeyOperatorValuesTime()
    end

    def send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
      send_message('findKeyOperatorValuesTime', FindKeyOperatorValuesTime_args, :key => key, :operator => operator, :values => values, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_findKeyOperatorValuesTime()
      result = receive_message(FindKeyOperatorValuesTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findKeyOperatorValuesTime failed: unknown result')
    end

    def findKeyStringOperatorValues(key, operator, values, creds, transaction, environment)
      send_findKeyStringOperatorValues(key, operator, values, creds, transaction, environment)
      return recv_findKeyStringOperatorValues()
    end

    def send_findKeyStringOperatorValues(key, operator, values, creds, transaction, environment)
      send_message('findKeyStringOperatorValues', FindKeyStringOperatorValues_args, :key => key, :operator => operator, :values => values, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_findKeyStringOperatorValues()
      result = receive_message(FindKeyStringOperatorValues_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findKeyStringOperatorValues failed: unknown result')
    end

    def findKeyStringOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
      send_findKeyStringOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
      return recv_findKeyStringOperatorValuesTime()
    end

    def send_findKeyStringOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
      send_message('findKeyStringOperatorValuesTime', FindKeyStringOperatorValuesTime_args, :key => key, :operator => operator, :values => values, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_findKeyStringOperatorValuesTime()
      result = receive_message(FindKeyStringOperatorValuesTime_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findKeyStringOperatorValuesTime failed: unknown result')
    end

    def search(key, query, creds, transaction, environment)
      send_search(key, query, creds, transaction, environment)
      return recv_search()
    end

    def send_search(key, query, creds, transaction, environment)
      send_message('search', Search_args, :key => key, :query => query, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_search()
      result = receive_message(Search_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search failed: unknown result')
    end

    def auditRecord(record, creds, transaction, environment)
      send_auditRecord(record, creds, transaction, environment)
      return recv_auditRecord()
    end

    def send_auditRecord(record, creds, transaction, environment)
      send_message('auditRecord', AuditRecord_args, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_auditRecord()
      result = receive_message(AuditRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auditRecord failed: unknown result')
    end

    def auditRecordStart(record, start, creds, transaction, environment)
      send_auditRecordStart(record, start, creds, transaction, environment)
      return recv_auditRecordStart()
    end

    def send_auditRecordStart(record, start, creds, transaction, environment)
      send_message('auditRecordStart', AuditRecordStart_args, :record => record, :start => start, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_auditRecordStart()
      result = receive_message(AuditRecordStart_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auditRecordStart failed: unknown result')
    end

    def auditRecordStartEnd(record, start, tend, creds, transaction, environment)
      send_auditRecordStartEnd(record, start, tend, creds, transaction, environment)
      return recv_auditRecordStartEnd()
    end

    def send_auditRecordStartEnd(record, start, tend, creds, transaction, environment)
      send_message('auditRecordStartEnd', AuditRecordStartEnd_args, :record => record, :start => start, :tend => tend, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_auditRecordStartEnd()
      result = receive_message(AuditRecordStartEnd_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auditRecordStartEnd failed: unknown result')
    end

    def auditKeyRecord(key, record, creds, transaction, environment)
      send_auditKeyRecord(key, record, creds, transaction, environment)
      return recv_auditKeyRecord()
    end

    def send_auditKeyRecord(key, record, creds, transaction, environment)
      send_message('auditKeyRecord', AuditKeyRecord_args, :key => key, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_auditKeyRecord()
      result = receive_message(AuditKeyRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auditKeyRecord failed: unknown result')
    end

    def auditKeyRecordStart(key, record, start, creds, transaction, environment)
      send_auditKeyRecordStart(key, record, start, creds, transaction, environment)
      return recv_auditKeyRecordStart()
    end

    def send_auditKeyRecordStart(key, record, start, creds, transaction, environment)
      send_message('auditKeyRecordStart', AuditKeyRecordStart_args, :key => key, :record => record, :start => start, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_auditKeyRecordStart()
      result = receive_message(AuditKeyRecordStart_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auditKeyRecordStart failed: unknown result')
    end

    def auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
      send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
      return recv_auditKeyRecordStartEnd()
    end

    def send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
      send_message('auditKeyRecordStartEnd', AuditKeyRecordStartEnd_args, :key => key, :record => record, :start => start, :tend => tend, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_auditKeyRecordStartEnd()
      result = receive_message(AuditKeyRecordStartEnd_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'auditKeyRecordStartEnd failed: unknown result')
    end

    def chronologizeKeyRecord(key, record, creds, transaction, environment)
      send_chronologizeKeyRecord(key, record, creds, transaction, environment)
      return recv_chronologizeKeyRecord()
    end

    def send_chronologizeKeyRecord(key, record, creds, transaction, environment)
      send_message('chronologizeKeyRecord', ChronologizeKeyRecord_args, :key => key, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_chronologizeKeyRecord()
      result = receive_message(ChronologizeKeyRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'chronologizeKeyRecord failed: unknown result')
    end

    def chronologizeKeyRecordStart(key, record, start, creds, transaction, environment)
      send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment)
      return recv_chronologizeKeyRecordStart()
    end

    def send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment)
      send_message('chronologizeKeyRecordStart', ChronologizeKeyRecordStart_args, :key => key, :record => record, :start => start, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_chronologizeKeyRecordStart()
      result = receive_message(ChronologizeKeyRecordStart_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'chronologizeKeyRecordStart failed: unknown result')
    end

    def chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
      send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
      return recv_chronologizeKeyRecordStartEnd()
    end

    def send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
      send_message('chronologizeKeyRecordStartEnd', ChronologizeKeyRecordStartEnd_args, :key => key, :record => record, :start => start, :tend => tend, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_chronologizeKeyRecordStartEnd()
      result = receive_message(ChronologizeKeyRecordStartEnd_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'chronologizeKeyRecordStartEnd failed: unknown result')
    end

    def revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      recv_revertKeysRecordsTime()
    end

    def send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
      send_message('revertKeysRecordsTime', RevertKeysRecordsTime_args, :keys => keys, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_revertKeysRecordsTime()
      result = receive_message(RevertKeysRecordsTime_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      recv_revertKeysRecordTime()
    end

    def send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
      send_message('revertKeysRecordTime', RevertKeysRecordTime_args, :keys => keys, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_revertKeysRecordTime()
      result = receive_message(RevertKeysRecordTime_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      recv_revertKeyRecordsTime()
    end

    def send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
      send_message('revertKeyRecordsTime', RevertKeyRecordsTime_args, :key => key, :records => records, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_revertKeyRecordsTime()
      result = receive_message(RevertKeyRecordsTime_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def revertKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      recv_revertKeyRecordTime()
    end

    def send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment)
      send_message('revertKeyRecordTime', RevertKeyRecordTime_args, :key => key, :record => record, :timestamp => timestamp, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_revertKeyRecordTime()
      result = receive_message(RevertKeyRecordTime_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def pingRecords(records, creds, transaction, environment)
      send_pingRecords(records, creds, transaction, environment)
      return recv_pingRecords()
    end

    def send_pingRecords(records, creds, transaction, environment)
      send_message('pingRecords', PingRecords_args, :records => records, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_pingRecords()
      result = receive_message(PingRecords_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'pingRecords failed: unknown result')
    end

    def pingRecord(record, creds, transaction, environment)
      send_pingRecord(record, creds, transaction, environment)
      return recv_pingRecord()
    end

    def send_pingRecord(record, creds, transaction, environment)
      send_message('pingRecord', PingRecord_args, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_pingRecord()
      result = receive_message(PingRecord_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'pingRecord failed: unknown result')
    end

    def verifyAndSwap(key, expected, record, replacement, creds, transaction, environment)
      send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment)
      return recv_verifyAndSwap()
    end

    def send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment)
      send_message('verifyAndSwap', VerifyAndSwap_args, :key => key, :expected => expected, :record => record, :replacement => replacement, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_verifyAndSwap()
      result = receive_message(VerifyAndSwap_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyAndSwap failed: unknown result')
    end

    def verifyOrSet(key, value, record, creds, transaction, environment)
      send_verifyOrSet(key, value, record, creds, transaction, environment)
      recv_verifyOrSet()
    end

    def send_verifyOrSet(key, value, record, creds, transaction, environment)
      send_message('verifyOrSet', VerifyOrSet_args, :key => key, :value => value, :record => record, :creds => creds, :transaction => transaction, :environment => environment)
    end

    def recv_verifyOrSet()
      result = receive_message(VerifyOrSet_result)
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      return
    end

    def getServerEnvironment(creds, token, environment)
      send_getServerEnvironment(creds, token, environment)
      return recv_getServerEnvironment()
    end

    def send_getServerEnvironment(creds, token, environment)
      send_message('getServerEnvironment', GetServerEnvironment_args, :creds => creds, :token => token, :environment => environment)
    end

    def recv_getServerEnvironment()
      result = receive_message(GetServerEnvironment_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerEnvironment failed: unknown result')
    end

    def getServerVersion()
      send_getServerVersion()
      return recv_getServerVersion()
    end

    def send_getServerVersion()
      send_message('getServerVersion', GetServerVersion_args)
    end

    def recv_getServerVersion()
      result = receive_message(GetServerVersion_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise result.ex2 unless result.ex2.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerVersion failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_login(seqid, iprot, oprot)
      args = read_args(iprot, Login_args)
      result = Login_result.new()
      begin
        result.success = @handler.login(args.username, args.password, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      end
      write_result(result, oprot, 'login', seqid)
    end

    def process_logout(seqid, iprot, oprot)
      args = read_args(iprot, Logout_args)
      result = Logout_result.new()
      begin
        @handler.logout(args.token, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      end
      write_result(result, oprot, 'logout', seqid)
    end

    def process_stage(seqid, iprot, oprot)
      args = read_args(iprot, Stage_args)
      result = Stage_result.new()
      begin
        result.success = @handler.stage(args.token, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      end
      write_result(result, oprot, 'stage', seqid)
    end

    def process_abort(seqid, iprot, oprot)
      args = read_args(iprot, Abort_args)
      result = Abort_result.new()
      begin
        @handler.abort(args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      end
      write_result(result, oprot, 'abort', seqid)
    end

    def process_commit(seqid, iprot, oprot)
      args = read_args(iprot, Commit_args)
      result = Commit_result.new()
      begin
        result.success = @handler.commit(args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'commit', seqid)
    end

    def process_addKeyValueRecord(seqid, iprot, oprot)
      args = read_args(iprot, AddKeyValueRecord_args)
      result = AddKeyValueRecord_result.new()
      begin
        result.success = @handler.addKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'addKeyValueRecord', seqid)
    end

    def process_addKeyValue(seqid, iprot, oprot)
      args = read_args(iprot, AddKeyValue_args)
      result = AddKeyValue_result.new()
      begin
        result.success = @handler.addKeyValue(args.key, args.value, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'addKeyValue', seqid)
    end

    def process_addKeyValueRecords(seqid, iprot, oprot)
      args = read_args(iprot, AddKeyValueRecords_args)
      result = AddKeyValueRecords_result.new()
      begin
        result.success = @handler.addKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'addKeyValueRecords', seqid)
    end

    def process_clearRecord(seqid, iprot, oprot)
      args = read_args(iprot, ClearRecord_args)
      result = ClearRecord_result.new()
      begin
        @handler.clearRecord(args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'clearRecord', seqid)
    end

    def process_clearRecords(seqid, iprot, oprot)
      args = read_args(iprot, ClearRecords_args)
      result = ClearRecords_result.new()
      begin
        @handler.clearRecords(args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'clearRecords', seqid)
    end

    def process_clearKeyRecord(seqid, iprot, oprot)
      args = read_args(iprot, ClearKeyRecord_args)
      result = ClearKeyRecord_result.new()
      begin
        @handler.clearKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'clearKeyRecord', seqid)
    end

    def process_clearKeysRecord(seqid, iprot, oprot)
      args = read_args(iprot, ClearKeysRecord_args)
      result = ClearKeysRecord_result.new()
      begin
        @handler.clearKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'clearKeysRecord', seqid)
    end

    def process_clearKeyRecords(seqid, iprot, oprot)
      args = read_args(iprot, ClearKeyRecords_args)
      result = ClearKeyRecords_result.new()
      begin
        @handler.clearKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'clearKeyRecords', seqid)
    end

    def process_clearKeysRecords(seqid, iprot, oprot)
      args = read_args(iprot, ClearKeysRecords_args)
      result = ClearKeysRecords_result.new()
      begin
        @handler.clearKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'clearKeysRecords', seqid)
    end

    def process_insertJson(seqid, iprot, oprot)
      args = read_args(iprot, InsertJson_args)
      result = InsertJson_result.new()
      begin
        result.success = @handler.insertJson(args.json, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'insertJson', seqid)
    end

    def process_insertJsonRecord(seqid, iprot, oprot)
      args = read_args(iprot, InsertJsonRecord_args)
      result = InsertJsonRecord_result.new()
      begin
        result.success = @handler.insertJsonRecord(args.json, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'insertJsonRecord', seqid)
    end

    def process_insertJsonRecords(seqid, iprot, oprot)
      args = read_args(iprot, InsertJsonRecords_args)
      result = InsertJsonRecords_result.new()
      begin
        result.success = @handler.insertJsonRecords(args.json, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'insertJsonRecords', seqid)
    end

    def process_removeKeyValueRecord(seqid, iprot, oprot)
      args = read_args(iprot, RemoveKeyValueRecord_args)
      result = RemoveKeyValueRecord_result.new()
      begin
        result.success = @handler.removeKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'removeKeyValueRecord', seqid)
    end

    def process_removeKeyValueRecords(seqid, iprot, oprot)
      args = read_args(iprot, RemoveKeyValueRecords_args)
      result = RemoveKeyValueRecords_result.new()
      begin
        result.success = @handler.removeKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'removeKeyValueRecords', seqid)
    end

    def process_setKeyValueRecord(seqid, iprot, oprot)
      args = read_args(iprot, SetKeyValueRecord_args)
      result = SetKeyValueRecord_result.new()
      begin
        @handler.setKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'setKeyValueRecord', seqid)
    end

    def process_setKeyValue(seqid, iprot, oprot)
      args = read_args(iprot, SetKeyValue_args)
      result = SetKeyValue_result.new()
      begin
        result.success = @handler.setKeyValue(args.key, args.value, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'setKeyValue', seqid)
    end

    def process_setKeyValueRecords(seqid, iprot, oprot)
      args = read_args(iprot, SetKeyValueRecords_args)
      result = SetKeyValueRecords_result.new()
      begin
        @handler.setKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'setKeyValueRecords', seqid)
    end

    def process_find(seqid, iprot, oprot)
      args = read_args(iprot, Find_args)
      result = Find_result.new()
      begin
        result.success = @handler.find(args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'find', seqid)
    end

    def process_selectRecord(seqid, iprot, oprot)
      args = read_args(iprot, SelectRecord_args)
      result = SelectRecord_result.new()
      begin
        result.success = @handler.selectRecord(args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectRecord', seqid)
    end

    def process_selectRecords(seqid, iprot, oprot)
      args = read_args(iprot, SelectRecords_args)
      result = SelectRecords_result.new()
      begin
        result.success = @handler.selectRecords(args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectRecords', seqid)
    end

    def process_selectRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectRecordTime_args)
      result = SelectRecordTime_result.new()
      begin
        result.success = @handler.selectRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectRecordTime', seqid)
    end

    def process_selectRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectRecordsTime_args)
      result = SelectRecordsTime_result.new()
      begin
        result.success = @handler.selectRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectRecordsTime', seqid)
    end

    def process_browseKey(seqid, iprot, oprot)
      args = read_args(iprot, BrowseKey_args)
      result = BrowseKey_result.new()
      begin
        result.success = @handler.browseKey(args.key, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'browseKey', seqid)
    end

    def process_browseKeys(seqid, iprot, oprot)
      args = read_args(iprot, BrowseKeys_args)
      result = BrowseKeys_result.new()
      begin
        result.success = @handler.browseKeys(args.keys, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'browseKeys', seqid)
    end

    def process_browseKeyTime(seqid, iprot, oprot)
      args = read_args(iprot, BrowseKeyTime_args)
      result = BrowseKeyTime_result.new()
      begin
        result.success = @handler.browseKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'browseKeyTime', seqid)
    end

    def process_browseKeysTime(seqid, iprot, oprot)
      args = read_args(iprot, BrowseKeysTime_args)
      result = BrowseKeysTime_result.new()
      begin
        result.success = @handler.browseKeysTime(args.keys, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'browseKeysTime', seqid)
    end

    def process_describeRecord(seqid, iprot, oprot)
      args = read_args(iprot, DescribeRecord_args)
      result = DescribeRecord_result.new()
      begin
        result.success = @handler.describeRecord(args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'describeRecord', seqid)
    end

    def process_describeRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, DescribeRecordTime_args)
      result = DescribeRecordTime_result.new()
      begin
        result.success = @handler.describeRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'describeRecordTime', seqid)
    end

    def process_describeRecords(seqid, iprot, oprot)
      args = read_args(iprot, DescribeRecords_args)
      result = DescribeRecords_result.new()
      begin
        result.success = @handler.describeRecords(args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'describeRecords', seqid)
    end

    def process_describeRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, DescribeRecordsTime_args)
      result = DescribeRecordsTime_result.new()
      begin
        result.success = @handler.describeRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'describeRecordsTime', seqid)
    end

    def process_selectKeyRecord(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyRecord_args)
      result = SelectKeyRecord_result.new()
      begin
        result.success = @handler.selectKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeyRecord', seqid)
    end

    def process_selectKeyRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyRecordTime_args)
      result = SelectKeyRecordTime_result.new()
      begin
        result.success = @handler.selectKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeyRecordTime', seqid)
    end

    def process_selectKeysRecord(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysRecord_args)
      result = SelectKeysRecord_result.new()
      begin
        result.success = @handler.selectKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeysRecord', seqid)
    end

    def process_selectKeysRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysRecordTime_args)
      result = SelectKeysRecordTime_result.new()
      begin
        result.success = @handler.selectKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeysRecordTime', seqid)
    end

    def process_selectKeysRecords(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysRecords_args)
      result = SelectKeysRecords_result.new()
      begin
        result.success = @handler.selectKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeysRecords', seqid)
    end

    def process_selectKeyRecords(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyRecords_args)
      result = SelectKeyRecords_result.new()
      begin
        result.success = @handler.selectKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeyRecords', seqid)
    end

    def process_selectKeyRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyRecordsTime_args)
      result = SelectKeyRecordsTime_result.new()
      begin
        result.success = @handler.selectKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeyRecordsTime', seqid)
    end

    def process_selectKeysRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysRecordsTime_args)
      result = SelectKeysRecordsTime_result.new()
      begin
        result.success = @handler.selectKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeysRecordsTime', seqid)
    end

    def process_selectCriteria(seqid, iprot, oprot)
      args = read_args(iprot, SelectCriteria_args)
      result = SelectCriteria_result.new()
      begin
        result.success = @handler.selectCriteria(args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectCriteria', seqid)
    end

    def process_selectCcl(seqid, iprot, oprot)
      args = read_args(iprot, SelectCcl_args)
      result = SelectCcl_result.new()
      begin
        result.success = @handler.selectCcl(args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'selectCcl', seqid)
    end

    def process_selectCriteriaTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectCriteriaTime_args)
      result = SelectCriteriaTime_result.new()
      begin
        result.success = @handler.selectCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectCriteriaTime', seqid)
    end

    def process_selectCclTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectCclTime_args)
      result = SelectCclTime_result.new()
      begin
        result.success = @handler.selectCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'selectCclTime', seqid)
    end

    def process_selectKeyCriteria(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyCriteria_args)
      result = SelectKeyCriteria_result.new()
      begin
        result.success = @handler.selectKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeyCriteria', seqid)
    end

    def process_selectKeyCcl(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyCcl_args)
      result = SelectKeyCcl_result.new()
      begin
        result.success = @handler.selectKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'selectKeyCcl', seqid)
    end

    def process_selectKeyCriteriaTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyCriteriaTime_args)
      result = SelectKeyCriteriaTime_result.new()
      begin
        result.success = @handler.selectKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeyCriteriaTime', seqid)
    end

    def process_selectKeyCclTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeyCclTime_args)
      result = SelectKeyCclTime_result.new()
      begin
        result.success = @handler.selectKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'selectKeyCclTime', seqid)
    end

    def process_selectKeysCriteria(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysCriteria_args)
      result = SelectKeysCriteria_result.new()
      begin
        result.success = @handler.selectKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeysCriteria', seqid)
    end

    def process_selectKeysCcl(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysCcl_args)
      result = SelectKeysCcl_result.new()
      begin
        result.success = @handler.selectKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'selectKeysCcl', seqid)
    end

    def process_selectKeysCriteriaTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysCriteriaTime_args)
      result = SelectKeysCriteriaTime_result.new()
      begin
        result.success = @handler.selectKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'selectKeysCriteriaTime', seqid)
    end

    def process_selectKeysCclTime(seqid, iprot, oprot)
      args = read_args(iprot, SelectKeysCclTime_args)
      result = SelectKeysCclTime_result.new()
      begin
        result.success = @handler.selectKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'selectKeysCclTime', seqid)
    end

    def process_getKeyRecord(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyRecord_args)
      result = GetKeyRecord_result.new()
      begin
        result.success = @handler.getKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeyRecord', seqid)
    end

    def process_getKeyRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyRecordTime_args)
      result = GetKeyRecordTime_result.new()
      begin
        result.success = @handler.getKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeyRecordTime', seqid)
    end

    def process_getKeysRecord(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysRecord_args)
      result = GetKeysRecord_result.new()
      begin
        result.success = @handler.getKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeysRecord', seqid)
    end

    def process_getKeysRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysRecordTime_args)
      result = GetKeysRecordTime_result.new()
      begin
        result.success = @handler.getKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeysRecordTime', seqid)
    end

    def process_getKeysRecords(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysRecords_args)
      result = GetKeysRecords_result.new()
      begin
        result.success = @handler.getKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeysRecords', seqid)
    end

    def process_getKeyRecords(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyRecords_args)
      result = GetKeyRecords_result.new()
      begin
        result.success = @handler.getKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeyRecords', seqid)
    end

    def process_getKeyRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyRecordsTime_args)
      result = GetKeyRecordsTime_result.new()
      begin
        result.success = @handler.getKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeyRecordsTime', seqid)
    end

    def process_getKeysRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysRecordsTime_args)
      result = GetKeysRecordsTime_result.new()
      begin
        result.success = @handler.getKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeysRecordsTime', seqid)
    end

    def process_getKeyCriteria(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyCriteria_args)
      result = GetKeyCriteria_result.new()
      begin
        result.success = @handler.getKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeyCriteria', seqid)
    end

    def process_getCriteria(seqid, iprot, oprot)
      args = read_args(iprot, GetCriteria_args)
      result = GetCriteria_result.new()
      begin
        result.success = @handler.getCriteria(args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getCriteria', seqid)
    end

    def process_getCcl(seqid, iprot, oprot)
      args = read_args(iprot, GetCcl_args)
      result = GetCcl_result.new()
      begin
        result.success = @handler.getCcl(args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'getCcl', seqid)
    end

    def process_getCriteriaTime(seqid, iprot, oprot)
      args = read_args(iprot, GetCriteriaTime_args)
      result = GetCriteriaTime_result.new()
      begin
        result.success = @handler.getCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getCriteriaTime', seqid)
    end

    def process_getCclTime(seqid, iprot, oprot)
      args = read_args(iprot, GetCclTime_args)
      result = GetCclTime_result.new()
      begin
        result.success = @handler.getCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'getCclTime', seqid)
    end

    def process_getKeyCcl(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyCcl_args)
      result = GetKeyCcl_result.new()
      begin
        result.success = @handler.getKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'getKeyCcl', seqid)
    end

    def process_getKeyCriteriaTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyCriteriaTime_args)
      result = GetKeyCriteriaTime_result.new()
      begin
        result.success = @handler.getKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeyCriteriaTime', seqid)
    end

    def process_getKeyCclTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeyCclTime_args)
      result = GetKeyCclTime_result.new()
      begin
        result.success = @handler.getKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'getKeyCclTime', seqid)
    end

    def process_getKeysCriteria(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysCriteria_args)
      result = GetKeysCriteria_result.new()
      begin
        result.success = @handler.getKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeysCriteria', seqid)
    end

    def process_getKeysCcl(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysCcl_args)
      result = GetKeysCcl_result.new()
      begin
        result.success = @handler.getKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'getKeysCcl', seqid)
    end

    def process_getKeysCriteriaTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysCriteriaTime_args)
      result = GetKeysCriteriaTime_result.new()
      begin
        result.success = @handler.getKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getKeysCriteriaTime', seqid)
    end

    def process_getKeysCclTime(seqid, iprot, oprot)
      args = read_args(iprot, GetKeysCclTime_args)
      result = GetKeysCclTime_result.new()
      begin
        result.success = @handler.getKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'getKeysCclTime', seqid)
    end

    def process_verifyKeyValueRecord(seqid, iprot, oprot)
      args = read_args(iprot, VerifyKeyValueRecord_args)
      result = VerifyKeyValueRecord_result.new()
      begin
        result.success = @handler.verifyKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'verifyKeyValueRecord', seqid)
    end

    def process_verifyKeyValueRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, VerifyKeyValueRecordTime_args)
      result = VerifyKeyValueRecordTime_result.new()
      begin
        result.success = @handler.verifyKeyValueRecordTime(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'verifyKeyValueRecordTime', seqid)
    end

    def process_jsonifyRecords(seqid, iprot, oprot)
      args = read_args(iprot, JsonifyRecords_args)
      result = JsonifyRecords_result.new()
      begin
        result.success = @handler.jsonifyRecords(args.records, args.identifier, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'jsonifyRecords', seqid)
    end

    def process_jsonifyRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, JsonifyRecordsTime_args)
      result = JsonifyRecordsTime_result.new()
      begin
        result.success = @handler.jsonifyRecordsTime(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'jsonifyRecordsTime', seqid)
    end

    def process_findCriteria(seqid, iprot, oprot)
      args = read_args(iprot, FindCriteria_args)
      result = FindCriteria_result.new()
      begin
        result.success = @handler.findCriteria(args.criteria, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'findCriteria', seqid)
    end

    def process_findCcl(seqid, iprot, oprot)
      args = read_args(iprot, FindCcl_args)
      result = FindCcl_result.new()
      begin
        result.success = @handler.findCcl(args.ccl, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      rescue ::TParseException => ex3
        result.ex3 = ex3
      end
      write_result(result, oprot, 'findCcl', seqid)
    end

    def process_findKeyOperatorValues(seqid, iprot, oprot)
      args = read_args(iprot, FindKeyOperatorValues_args)
      result = FindKeyOperatorValues_result.new()
      begin
        result.success = @handler.findKeyOperatorValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'findKeyOperatorValues', seqid)
    end

    def process_findKeyOperatorValuesTime(seqid, iprot, oprot)
      args = read_args(iprot, FindKeyOperatorValuesTime_args)
      result = FindKeyOperatorValuesTime_result.new()
      begin
        result.success = @handler.findKeyOperatorValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'findKeyOperatorValuesTime', seqid)
    end

    def process_findKeyStringOperatorValues(seqid, iprot, oprot)
      args = read_args(iprot, FindKeyStringOperatorValues_args)
      result = FindKeyStringOperatorValues_result.new()
      begin
        result.success = @handler.findKeyStringOperatorValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'findKeyStringOperatorValues', seqid)
    end

    def process_findKeyStringOperatorValuesTime(seqid, iprot, oprot)
      args = read_args(iprot, FindKeyStringOperatorValuesTime_args)
      result = FindKeyStringOperatorValuesTime_result.new()
      begin
        result.success = @handler.findKeyStringOperatorValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'findKeyStringOperatorValuesTime', seqid)
    end

    def process_search(seqid, iprot, oprot)
      args = read_args(iprot, Search_args)
      result = Search_result.new()
      begin
        result.success = @handler.search(args.key, args.query, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'search', seqid)
    end

    def process_auditRecord(seqid, iprot, oprot)
      args = read_args(iprot, AuditRecord_args)
      result = AuditRecord_result.new()
      begin
        result.success = @handler.auditRecord(args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'auditRecord', seqid)
    end

    def process_auditRecordStart(seqid, iprot, oprot)
      args = read_args(iprot, AuditRecordStart_args)
      result = AuditRecordStart_result.new()
      begin
        result.success = @handler.auditRecordStart(args.record, args.start, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'auditRecordStart', seqid)
    end

    def process_auditRecordStartEnd(seqid, iprot, oprot)
      args = read_args(iprot, AuditRecordStartEnd_args)
      result = AuditRecordStartEnd_result.new()
      begin
        result.success = @handler.auditRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'auditRecordStartEnd', seqid)
    end

    def process_auditKeyRecord(seqid, iprot, oprot)
      args = read_args(iprot, AuditKeyRecord_args)
      result = AuditKeyRecord_result.new()
      begin
        result.success = @handler.auditKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'auditKeyRecord', seqid)
    end

    def process_auditKeyRecordStart(seqid, iprot, oprot)
      args = read_args(iprot, AuditKeyRecordStart_args)
      result = AuditKeyRecordStart_result.new()
      begin
        result.success = @handler.auditKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'auditKeyRecordStart', seqid)
    end

    def process_auditKeyRecordStartEnd(seqid, iprot, oprot)
      args = read_args(iprot, AuditKeyRecordStartEnd_args)
      result = AuditKeyRecordStartEnd_result.new()
      begin
        result.success = @handler.auditKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'auditKeyRecordStartEnd', seqid)
    end

    def process_chronologizeKeyRecord(seqid, iprot, oprot)
      args = read_args(iprot, ChronologizeKeyRecord_args)
      result = ChronologizeKeyRecord_result.new()
      begin
        result.success = @handler.chronologizeKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'chronologizeKeyRecord', seqid)
    end

    def process_chronologizeKeyRecordStart(seqid, iprot, oprot)
      args = read_args(iprot, ChronologizeKeyRecordStart_args)
      result = ChronologizeKeyRecordStart_result.new()
      begin
        result.success = @handler.chronologizeKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'chronologizeKeyRecordStart', seqid)
    end

    def process_chronologizeKeyRecordStartEnd(seqid, iprot, oprot)
      args = read_args(iprot, ChronologizeKeyRecordStartEnd_args)
      result = ChronologizeKeyRecordStartEnd_result.new()
      begin
        result.success = @handler.chronologizeKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'chronologizeKeyRecordStartEnd', seqid)
    end

    def process_revertKeysRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, RevertKeysRecordsTime_args)
      result = RevertKeysRecordsTime_result.new()
      begin
        @handler.revertKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'revertKeysRecordsTime', seqid)
    end

    def process_revertKeysRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, RevertKeysRecordTime_args)
      result = RevertKeysRecordTime_result.new()
      begin
        @handler.revertKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'revertKeysRecordTime', seqid)
    end

    def process_revertKeyRecordsTime(seqid, iprot, oprot)
      args = read_args(iprot, RevertKeyRecordsTime_args)
      result = RevertKeyRecordsTime_result.new()
      begin
        @handler.revertKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'revertKeyRecordsTime', seqid)
    end

    def process_revertKeyRecordTime(seqid, iprot, oprot)
      args = read_args(iprot, RevertKeyRecordTime_args)
      result = RevertKeyRecordTime_result.new()
      begin
        @handler.revertKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'revertKeyRecordTime', seqid)
    end

    def process_pingRecords(seqid, iprot, oprot)
      args = read_args(iprot, PingRecords_args)
      result = PingRecords_result.new()
      begin
        result.success = @handler.pingRecords(args.records, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'pingRecords', seqid)
    end

    def process_pingRecord(seqid, iprot, oprot)
      args = read_args(iprot, PingRecord_args)
      result = PingRecord_result.new()
      begin
        result.success = @handler.pingRecord(args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'pingRecord', seqid)
    end

    def process_verifyAndSwap(seqid, iprot, oprot)
      args = read_args(iprot, VerifyAndSwap_args)
      result = VerifyAndSwap_result.new()
      begin
        result.success = @handler.verifyAndSwap(args.key, args.expected, args.record, args.replacement, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'verifyAndSwap', seqid)
    end

    def process_verifyOrSet(seqid, iprot, oprot)
      args = read_args(iprot, VerifyOrSet_args)
      result = VerifyOrSet_result.new()
      begin
        @handler.verifyOrSet(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'verifyOrSet', seqid)
    end

    def process_getServerEnvironment(seqid, iprot, oprot)
      args = read_args(iprot, GetServerEnvironment_args)
      result = GetServerEnvironment_result.new()
      begin
        result.success = @handler.getServerEnvironment(args.creds, args.token, args.environment)
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getServerEnvironment', seqid)
    end

    def process_getServerVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetServerVersion_args)
      result = GetServerVersion_result.new()
      begin
        result.success = @handler.getServerVersion()
      rescue ::TSecurityException => ex
        result.ex = ex
      rescue ::TTransactionException => ex2
        result.ex2 = ex2
      end
      write_result(result, oprot, 'getServerVersion', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Login_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    PASSWORD = 2
    ENVIRONMENT = 3

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username', :binary => true},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password', :binary => true},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Login_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AccessToken},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logout_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TOKEN = 1
    ENVIRONMENT = 2

    FIELDS = {
      TOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'token', :class => ::AccessToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logout_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Stage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TOKEN = 1
    ENVIRONMENT = 2

    FIELDS = {
      TOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'token', :class => ::AccessToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Stage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TransactionToken},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Abort_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CREDS = 1
    TRANSACTION = 2
    ENVIRONMENT = 3

    FIELDS = {
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Abort_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Commit_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CREDS = 1
    TRANSACTION = 2
    ENVIRONMENT = 3

    FIELDS = {
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Commit_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKeyValueRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORD = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKeyValueRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKeyValue_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKeyValue_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKeyValueRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORDS = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKeyValueRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::BOOL}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeyRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeyRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeysRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeysRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeyRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeyRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeysRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ClearKeysRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertJson_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JSON = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      JSON => {:type => ::Thrift::Types::STRING, :name => 'json'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertJson_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertJsonRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JSON = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      JSON => {:type => ::Thrift::Types::STRING, :name => 'json'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertJsonRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertJsonRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JSON = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      JSON => {:type => ::Thrift::Types::STRING, :name => 'json'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertJsonRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::BOOL}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveKeyValueRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORD = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveKeyValueRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveKeyValueRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORDS = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveKeyValueRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::BOOL}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetKeyValueRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORD = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetKeyValueRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetKeyValue_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetKeyValue_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetKeyValueRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORDS = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetKeyValueRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Find_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CREDS = 1
    TRANSACTION = 2
    ENVIRONMENT = 3

    FIELDS = {
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Find_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKeys_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKeys_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKeyTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKeyTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKeysTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BrowseKeysTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRING}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DescribeRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRING}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORD = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORDS = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORDS = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIA = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CCL = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCriteriaTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIA = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCriteriaTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCclTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CCL = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectCclTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CRITERIA = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CCL = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCriteriaTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CRITERIA = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCriteriaTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCclTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CCL = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeyCclTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CRITERIA = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CCL = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCriteriaTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CRITERIA = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCriteriaTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCclTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CCL = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SelectKeysCclTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TObject},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TObject},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORD = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORDS = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORDS = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORDS = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CRITERIA = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIA = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CCL = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCriteriaTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIA = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCriteriaTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCclTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CCL = 1
    TIMESTAMP = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCclTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CCL = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCriteriaTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CRITERIA = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCriteriaTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCclTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    CCL = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeyCclTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CRITERIA = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CCL = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCriteriaTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CRITERIA = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCriteriaTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCclTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    CCL = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetKeysCclTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyKeyValueRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORD = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyKeyValueRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyKeyValueRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORD = 3
    TIMESTAMP = 4
    CREDS = 5
    TRANSACTION = 6
    ENVIRONMENT = 7

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyKeyValueRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JsonifyRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    IDENTIFIER = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      IDENTIFIER => {:type => ::Thrift::Types::BOOL, :name => 'identifier'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JsonifyRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JsonifyRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    TIMESTAMP = 2
    IDENTIFIER = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      IDENTIFIER => {:type => ::Thrift::Types::BOOL, :name => 'identifier'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JsonifyRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindCriteria_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIA = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      CRITERIA => {:type => ::Thrift::Types::STRUCT, :name => 'criteria', :class => ::TCriteria},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindCriteria_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindCcl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CCL = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      CCL => {:type => ::Thrift::Types::STRING, :name => 'ccl'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindCcl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2
    EX3 = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException},
      EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => ::TParseException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyOperatorValues_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    OPERATOR = 2
    VALUES = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      OPERATOR => {:type => ::Thrift::Types::I32, :name => 'operator', :enum_class => ::Operator},
      VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @operator.nil? || ::Operator::VALID_VALUES.include?(@operator)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field operator!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyOperatorValues_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyOperatorValuesTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    OPERATOR = 2
    VALUES = 3
    TIMESTAMP = 4
    CREDS = 5
    TRANSACTION = 6
    ENVIRONMENT = 7

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      OPERATOR => {:type => ::Thrift::Types::I32, :name => 'operator', :enum_class => ::Operator},
      VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @operator.nil? || ::Operator::VALID_VALUES.include?(@operator)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field operator!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyOperatorValuesTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyStringOperatorValues_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    OPERATOR = 2
    VALUES = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      OPERATOR => {:type => ::Thrift::Types::STRING, :name => 'operator'},
      VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyStringOperatorValues_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyStringOperatorValuesTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    OPERATOR = 2
    VALUES = 3
    TIMESTAMP = 4
    CREDS = 5
    TRANSACTION = 6
    ENVIRONMENT = 7

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      OPERATOR => {:type => ::Thrift::Types::STRING, :name => 'operator'},
      VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindKeyStringOperatorValuesTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    QUERY = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditRecordStart_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    START = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditRecordStart_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditRecordStartEnd_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    START = 2
    TEND = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      TEND => {:type => ::Thrift::Types::I64, :name => 'tend'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditRecordStartEnd_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditKeyRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditKeyRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditKeyRecordStart_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    START = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditKeyRecordStart_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditKeyRecordStartEnd_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    START = 3
    TEND = 4
    CREDS = 5
    TRANSACTION = 6
    ENVIRONMENT = 7

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      TEND => {:type => ::Thrift::Types::I64, :name => 'tend'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AuditKeyRecordStartEnd_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChronologizeKeyRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    CREDS = 3
    TRANSACTION = 4
    ENVIRONMENT = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChronologizeKeyRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChronologizeKeyRecordStart_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    START = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChronologizeKeyRecordStart_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChronologizeKeyRecordStartEnd_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    START = 3
    TEND = 4
    CREDS = 5
    TRANSACTION = 6
    ENVIRONMENT = 7

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      START => {:type => ::Thrift::Types::I64, :name => 'start'},
      TEND => {:type => ::Thrift::Types::I64, :name => 'tend'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChronologizeKeyRecordStartEnd_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::TObject}}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeysRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORDS = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeysRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeysRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYS = 1
    RECORD = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeysRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeyRecordsTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORDS = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeyRecordsTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeyRecordTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RECORD = 2
    TIMESTAMP = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevertKeyRecordTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PingRecords_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::I64}},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PingRecords_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::BOOL}},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PingRecord_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1
    CREDS = 2
    TRANSACTION = 3
    ENVIRONMENT = 4

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PingRecord_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyAndSwap_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    EXPECTED = 2
    RECORD = 3
    REPLACEMENT = 4
    CREDS = 5
    TRANSACTION = 6
    ENVIRONMENT = 7

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      EXPECTED => {:type => ::Thrift::Types::STRUCT, :name => 'expected', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      REPLACEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'replacement', :class => ::TObject},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyAndSwap_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyOrSet_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2
    RECORD = 3
    CREDS = 4
    TRANSACTION = 5
    ENVIRONMENT = 6

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'value', :class => ::TObject},
      RECORD => {:type => ::Thrift::Types::I64, :name => 'record'},
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TRANSACTION => {:type => ::Thrift::Types::STRUCT, :name => 'transaction', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyOrSet_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EX = 1
    EX2 = 2

    FIELDS = {
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerEnvironment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CREDS = 1
    TOKEN = 2
    ENVIRONMENT = 3

    FIELDS = {
      CREDS => {:type => ::Thrift::Types::STRUCT, :name => 'creds', :class => ::AccessToken},
      TOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'token', :class => ::TransactionToken},
      ENVIRONMENT => {:type => ::Thrift::Types::STRING, :name => 'environment'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerEnvironment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1
    EX2 = 2

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::TSecurityException},
      EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => ::TTransactionException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

