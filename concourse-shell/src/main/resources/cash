CASH(1)                                                                CASH(1)



NNAAMMEE
       ccaasshh - Concourse Action SHell

DDEESSCCRRIIPPTTIIOONN
       CCaasshh  is  an interpreter that executes commands against Concourse using
       the standard API. Since CCaasshh is backed by the full power of the  Groovy
       scripting language, it is possible to write powerful routines that read
       and write data on the fly.

UUSSAAGGEE
       You can use Java or Groovy syntax (e.g. no paranthesis) to invoke meth-
       ods in CaSH. Groovy syntax is only parsable in standalone statements.

       mmeetthhoodd arg1, arg2, arg3 _O_R mmeetthhoodd((arg1, arg2, mmeetthhoodd11((arg3))))

MMEETTHHOODDSS
   BBaassiicc WWRRIITTEE OOppeerraattiioonnss
       Concourse  allows  you  to  write data immediately without specifying a
       schema or creating any explict strcuture. The Concourse data  model  is
       simple.  Data  about  each  person, place or thing is held in a _r_e_c_o_r_d,
       which is simply a collection of _k_e_y_/_v_a_l_u_e pairs that are together iden-
       tified by a unique _p_r_i_m_a_r_y _k_e_y. A key can map to multiple distinct val-
       ues, even if those values have different types.

       aadddd(key, value, record) -> _b_o_o_l_e_a_n
              Add _k_e_y (String) AS _v_a_l_u_e (Object) TO _r_e_c_o_r_d (long) if it is not
              already contained.

       rreemmoovvee(key, value, record) -> _b_o_o_l_e_a_n
              Remove  _k_e_y  (String) as _v_a_l_u_e (Object) FROM _r_e_c_o_r_d (long) if it
              is contained.

       sseett(key, value, record)
              Atomically remove all  the  values  currently  mapped  from  _k_e_y
              (String)  in  _r_e_c_o_r_d  (long)  and  add  _k_e_y AS _v_a_l_u_e (Object) TO
              _r_e_c_o_r_d.

   BBaassiicc RREEAADD OOppeerraattiioonnss
       Concourse  automatically  creates  primary,  secondary  and  full  text
       indexes  for  all  of your data so you can perform efficient predicate,
       range and search queries on anything at  anytime.  Concourse  automati-
       cally caches frequently request data in memory for optimal performance.

       bbrroowwssee(record) -> _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]
              Return a map of every key in _r_e_c_o_r_d (long) to its mapped set  of
              values.   This  method  is  the  atomic  equivalent  of  calling
              ffeettcchh((ddeessccrriibbee((rreeccoorrdd)),, rreeccoorrdd)).

       bbrroowwssee(key) -> _M_a_p_[_O_b_j_e_c_t_, _S_e_t_[_L_o_n_g_]_]
              Return a map of every value mapped from _k_e_y (String) to the  set
              of records that contain the key/value mapping.

       ddeessccrriibbee(record) -> _S_e_t_[_S_t_r_i_n_g_]
              Return  the  keys  that currenltly exist (e.g. have at least one
              mapped value) in _r_e_c_o_r_d (long).

       ffeettcchh(key, record) -> _S_e_t_[_O_b_j_e_c_t_]
              Return all the values mapped from _k_e_y (String) in _r_e_c_o_r_d (long).

       ffiinndd(criteria) -> _S_e_t_[_L_o_n_g_]
              Return all the records that satisfy the _c_r_i_t_e_r_i_a (Criteria).

              READ THE CCRRIITTEERRIIAA SECTION FOR MORE INFORMATION

       ffiinndd(key, operator, value[, value1]) -> _S_e_t_[_L_o_n_g_]
              Return all the records that satisfy _k_e_y (String) _o_p_e_r_a_t_o_r (Oper-
              ator) _v_a_l_u_e (Object).

              READ THE OOPPEERRAATTOORRSS SECTION FOR MORE INFORMATION

       ggeett(key, record) -> _O_b_j_e_c_t
              Return the oldest value currently mapped from  _k_e_y  (String)  in
              _r_e_c_o_r_d (long).

       sseeaarrcchh(key, query) -> _S_e_t_[_L_o_n_g_]
              Perform  a  full  text  search  for  _q_u_e_r_y  (String) against _k_e_y
              (String) and return the records that contain matching values.

       vveerriiffyy(key, value, record) -> _b_o_o_l_e_a_n
              Return _t_r_u_e if _v_a_l_u_e  (Object)  is  currently  mapped  from  _k_e_y
              (String) in _r_e_c_o_r_d (long).

   TTrraannssaaccttiioonn OOppeerraattiioonnss
       Concourse  provides  cross-record transactions that are fully ACID com-
       pliant: all operations succeed or fail together; writes are visible  to
       all  readers only after being successfully committed; serializable iso-
       lation is used to prevent dirty reads, non-repeatable reads and phantom
       reads;  and  committed  transactions  are immediately stored to disk so
       they persist in the event of power loss, crash or error

       ssttaaggee()
              Enable _s_t_a_g_i_n_g mode so that all subsequent changes are collected
              in a staging area before possibly being committed. Staged opera-
              tions are guranteed to be reliable, all or nothing unit of works
              that  allow correct recovery from failures and provide isolation
              between clients so that Concourse is always consistent  (e.g.  a
              Transaction).  After  this method returns, all subsequent opera-
              tions will be done in _s_t_a_g_i_n_g mode until either aabboorrtt(()) or  ccoomm--
              mmiitt(()) is called.

       ccoommmmiitt() -> _b_o_o_l_e_a_n
              Attempt  to permanently commit all the currently staged changes.
              This method returns _t_r_u_e if and only if all the changes  in  the
              staging area can be successfully applied while keeping Concourse
              in a consistent state. Otherwise, this method returns _f_a_l_s_e  and
              all  the  changes  are  aborted. After this method returns, Con-
              course will return to _a_u_t_o_c_o_m_m_i_t mode and all subsequent changes
              will be committed immediately until ssttaaggee(()) is called again.

       aabboorrtt()
              Discard  any changes that are currently staged for commit. After
              this function returns, Concourse will be set to _a_u_t_o_c_o_m_m_i_t  mode
              and all subsequent changes will be written immediately.

   AAttoommiicc OOppeerraattiioonnss
       Concourse  provides  low-level  atomic  operations  that  combine other
       low-level operations into a single unit of work  that  all  succeed  or
       fail  together.  These  methods  can  be  used  to  perform some common
       multi-step tasks without creating a Transaction.

       cclleeaarr(record)
              Atomically remove each key in _r_e_c_o_r_d  (long)  and  their  mapped
              values.

       cclleeaarr(key, record)
              Atomically  remove each value mapped from _k_e_y (String) in _r_e_c_o_r_d
              (long).

       iinnsseerrtt(json) -> _l_o_n_g
              Atomically add the key/value  mappings  described  in  the  _j_s_o_n
              (String)  into  a  new  record.  The  JSON formatted string must
              describe a JSON object that contains one or more keys,  each  of
              which  maps  to  a JSON primitive or an array of JSON primitives
              (basically no embedded JSON objects).

       iinnsseerrtt(json, record) -> _b_o_o_l_e_a_n
              Atomically add the key/value  mappings  described  in  the  _j_s_o_n
              (String)  into  _r_e_c_o_r_d  (long).  The  JSON formatted string must
              describe a JSON object that contains one or more keys,  each  of
              which  maps  to  a JSON primitive or an array of JSON primitives
              (basically no embedded JSON objects).

       vveerriiffyyAAnnddSSwwaapp(key, expected, record, replacement) -> _b_o_o_l_e_a_n
              Atomically verify that _k_e_y (String) equals the _e_x_p_e_c_t_e_d (Object)
              value  in _r_e_c_o_r_d (long) and, if so, swap it with the _r_e_p_l_a_c_e_m_e_n_t
              (Object) value.

   VVeerrssiioonn CCoonnttrrooll OOppeerraattiioonnss
       Concourse automatically and efficiently tracks revisions to your  data.
       This  means  that  you  can easily audit changes and revert to previous
       states without downtime.

       aauuddiitt(record) -> _M_a_p_[_T_i_m_e_s_t_a_m_p_, _S_t_r_i_n_g_]
              Return a map of every modification timestamp in _r_e_c_o_r_d (long) to
              a description of the revision that occured.

       aauuddiitt(key, record) -> _M_a_p_[_T_i_m_e_s_t_a_m_p_, _S_t_r_i_n_g_]
              Return a map of every modification timestamp for _k_e_y (String) in
              _r_e_c_o_r_d (long) to a description of the revision that occured.

       cchhrroonnoollooggiizzee(key, record) -> _M_a_p_[_T_i_m_e_s_t_a_m_p_, _S_e_t_{_O_b_j_e_c_t_]_]
              Return a  chronological  mapping  from  each  timestamp  when  a
              changed  occurred  to  the set of values that were contained for
              _k_e_y (String) in _r_e_c_o_r_d (long) at the time.

       cchhrroonnoollooggiizzee(key, record, start) -> _M_a_p_[_T_i_m_e_s_t_a_m_p_, _S_e_t_[_O_b_j_e_c_t_]_]
              Return a chronological mapping from each timestamp between _s_t_a_r_t
              (Timestamp) and now when a changed occurred to the set of values
              that were contained for _k_e_y (String) in  _r_e_c_o_r_d  (long)  at  the
              time.

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       cchhrroonnoollooggiizzee(key, record, start, end) -> _M_a_p_[_T_i_m_e_s_t_a_m_p_, _S_e_t_[_O_b_j_e_c_t_]_]
              Return a chronological mapping from each timestamp between _s_t_a_r_t
              (Timestamp) and _e_n_d (Timestamp) when a changed occurred  to  the
              set  of  values  that  were contained for _k_e_y (String) in _r_e_c_o_r_d
              (long) at the time.

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       rreevveerrtt(key, record, timestamp)
              Atomically create new revisions that undo the  relevant  changes
              to have occured to _k_e_y (String) in _r_e_c_o_r_d (long) since _t_i_m_e_s_t_a_m_p
              (Timestamp)so that the values that are mapped from _k_e_y in _r_e_c_o_r_d
              are the same ones that were mapped at _t_i_m_e_s_t_a_m_p.

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

   HHiissttoorriiccaall RREEAADD OOppeerraattiioonnss
       Version  control  in  Concourse  also  means that you have the power to
       query and fetch data from any point in the past, which makes it  possi-
       ble to build applications that know what was known when and can analyze
       real-time changes over time.

       bbrroowwssee(record, timestamp) -> _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]
              Return a map of every key in _r_e_c_o_r_d (long) to its mapped set  of
              values  at  _t_i_m_e_s_t_a_m_p  (Timestamp).  This  method  is the atomic
              equivalent of calling ffeettcchh((ddeessccrriibbee((rreeccoorrdd,, ttiimmeessttaammpp)),, rreeccoorrdd,,
              ttiimmeessttaammpp)).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       bbrroowwssee(key, timestamp) -> _M_a_p_[_O_b_j_e_c_t_, _S_e_t_[_L_o_n_g_]_]
              Return  a map of every value mapped from _k_e_y (String) to the set
              of records that contained the mapping at _t_i_m_e_s_t_a_m_p  (Timestamp).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       ddeessccrriibbee(record, timestamp) -> _S_e_t_[_S_t_r_i_n_g_]
              Return  the  keys  that  existed  (e.g.  had at least one mapped
              value) in _r_e_c_o_r_d (long) at _t_i_m_e_s_t_a_m_p (Timestamp).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       ffeettcchh(key, record, timestamp) -> _S_e_t_[_O_b_j_e_c_t_]
              Return all the values mapped from _k_e_y (String) in _r_e_c_o_r_d  (long)
              at _t_i_m_e_s_t_a_m_p (Timestamp).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       ffiinndd(key, operator, value, [value1, ] timestamp) -> _S_e_t_[_L_o_n_g_]
              Return  all  the  records  that  satisfied _k_e_y (String) _o_p_e_r_a_t_o_r
              (Operator) _v_a_l_u_e (Object) at _t_i_m_e_s_t_a_m_p (Timestamp).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

              READ THE OOPPEERRAATTOORRSS SECTION FOR MORE INFORMATION

       ggeett(key, record, timestamp) -> _O_b_j_e_c_t
              Return the oldest value  mapped  from  _k_e_y  (String)  in  _r_e_c_o_r_d
              (long) at _t_i_m_e_s_t_a_m_p (Timestamp).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

       vveerriiffyy(key, value, record, timestamp) -> _b_o_o_l_e_a_n
              Return  _t_r_u_e  if  _v_a_l_u_e (Object) was mapped from _k_e_y (String) in
              _r_e_c_o_r_d (long) at _t_i_m_e_s_t_a_m_p (Timestamp).

              READ THE TTIIMMEESSTTAAMMPP SECTION FOR MORE INFORMATION

   GGrraapphh OOppeerraattiioonnss
       The people, places and things in your data are all connected.  So  Con-
       course  allows  you to model those relationships with enforced referen-
       tial integrity and also provides a built-in interface to  perform  ana-
       lytical graph queries.

       lliinnkk(key, source, destination) -> _b_o_o_l_e_a_n
              Add  a link from _k_e_y (String) in the _s_o_u_r_c_e (long) record to the
              _d_e_s_t_i_n_a_t_i_o_n (long) record if one does not exist.

       uunnlliinnkk(key, source, destination) -> _b_o_o_l_e_a_n
              Remove the link from _k_e_y in the _s_o_u_r_c_e (long) record that points
              to the _d_e_s_t_i_n_a_t_i_o_n (long) record if it exists.

   MMiisscceellllaanneeoouuss OOppeerraattiioonnss
       Concourse has a few utility operations that provide useful metadata.

       ggeettSSeerrvveerrEEnnvviirroonnmmeenntt(()) -> _S_t_r_i_n_g
              Return the environment of the server that is currently in use by
              the client.

       ggeettSSeerrvveerrVVeerrssiioonn(()) -> _S_t_r_i_n_g
              Return the version of the server to which  the  client  is  cur-
              rently connected.

       ppiinngg(record) -> _b_o_o_l_e_a_n
              Return _t_r_u_e if the _r_e_c_o_r_d (long) currently has at least one pop-
              ulated key.

   CCoommppoouunndd OOppeerraattiioonnss
       For many of the operations above, Concourse provides convenience  meth-
       ods to combine two or more operations in non-atomic manner. In general,
       these methods operate on collections (i.e. get the value mapped from  a
       key  in  a  collection  of records). You can embed the results of other
       methods or specify a list manually: ggeett("name", ffiinndd("age", gt, 30)) _O_R
       ggeett("name", [1, 2, 3, 100]).

       +o   aadddd(key, value, record_s) -> _M_a_p_[_L_o_n_g_, _B_o_o_l_e_a_n_]

       +o   bbrroowwssee(record_s) -> _M_a_p_[_L_o_n_g_, _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]_]

       +o   bbrroowwssee(record_s, timestamp) -> _M_a_p_[_L_o_n_g_, _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]_]

       +o   cclleeaarr(key, record_s)

       +o   cclleeaarr(record_s)

       +o   cclleeaarr(key_s, record)

       +o   cclleeaarr(key_s, record_s)

       +o   ddeessccrriibbee(record_s) -> _M_a_p_[_L_o_n_g_, _S_e_t_[_S_t_r_i_n_g_]_]

       +o   ddeessccrriibbee(record_s, timestamp) -> _M_a_p_[_L_o_n_g_, _S_e_t_[_S_t_r_i_n_g_]_]

       +o   ffeettcchh(key_s, record) -> _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]

       +o   ffeettcchh(key_s, record, timestamp) -> _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]

       +o   ffeettcchh(key, record_s) -> _M_a_p_[_L_o_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]

       +o   ffeettcchh(key, record_s, timestamp) -> _M_a_p_[_L_o_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]

       +o   ffeettcchh(key_s, record_s) -> _M_a_p_[_L_o_n_g_, _M_a_p_[_S_t_r_i_n_g_, _S_e_t_[_O_b_j_e_c_t_]_]_]

       +o   ffeettcchh(key_s,    record_s,   timestamp)   ->   _M_a_p_[_L_o_n_g_,   _M_a_p_[_S_t_r_i_n_g_,
           _S_e_t_[_O_b_j_e_c_t_]_]_]

       +o   ggeett(key_s, record) -> _M_a_p_[_S_t_r_i_n_g_, _O_b_j_e_c_t_]

       +o   ggeett(key_s, record, timestamp) -> _M_a_p_[_S_t_r_i_n_g_, _O_b_j_e_c_t_]

       +o   ggeett(key, records) -> _M_a_p_[_L_o_n_g_, _O_b_j_e_c_t_]

       +o   ggeett(key, record_s, timestamp) -> _M_a_p_[_L_o_n_g_, _O_b_j_e_c_t_]

       +o   ggeett(key_s, record_s) -> _M_a_p_[_L_o_n_g_, _M_a_p_[_S_t_r_i_n_g_, _O_b_j_e_c_t_]_]

       +o   ggeett(key_s, record_s, timestamp) -> _M_a_p_[_L_o_n_g_, _M_a_p_[_S_t_r_i_n_g_, _O_b_j_e_c_t_]_]

       +o   ppiinngg(record_s) -> _M_a_p_[_L_o_n_g_, _B_o_o_l_e_a_n_]

       +o   rreemmoovvee(key, value, record_s) -> _M_a_p_[_L_o_n_g_, _B_o_o_l_e_a_n_]

       +o   rreevveerrtt(key_s, record, timestamp)

       +o   rreevveerrtt(key, record_s, timestamp)

       +o   rreevveerrtt(key_s, record_s, timestamp)

       +o   sseett(key, value, record_s)



CCRRIITTEERRIIAA
       Concourse allows you to programatically build complex criteria  to  use
       in  a ffiinndd query. You can start to build a criteria statement by invok-
       ing the wwhheerree(()) function.

   EExxaammpplleess
       SSiimmppllee where().key("name").operator(eq).value("Jeff Nelson")

       MMuullttiippllee VVaalluueess
              where().key("age").operator(bw).value(20).value(30)

       CCoonnjjuunnccttiivvee
              where().key("name").operator(eq).value("Jeff                Nel-
              son").and().key("age").operator(neq).value(30)

       DDiissjjuunnccttiivvee
              where().key("name").operator(eq).value("Jeff                Nel-
              son").or().key("age").operator(neq).value(30)

OOPPEERRAATTOORRSS
       Operators are used in ffiinndd queries and CCrriitteerriiaa  statements  to  filter
       the result set. CaSH provides built-in shortcut variables to access the
       members of the OOppeerraattoorr class.

       eeqq     EQUALS

       nneeqq    NOT_EQUALS

       ggtt     GREATER_THAN

       lltt     LESS_THAN

       ggttee    GREATER_THAN_OR_EQUALS

       llttee    LESS_THAN_OR_EQUALS

       bbww     BETWEEN

       rreeggeexx  REGEX

       nnrreeggeexx NOT_REGEX

       llnnkk22   LINKS_TO

TTIIMMEESSTTAAMMPP
       Use the ddaattee or ttiimmee function to convert a valid English expression  or
       unix timestamp with microsecond precision to a TTiimmeessttaammpp object.

   EExxaammppllee
       verify(key, value, record, time("expression"))

   RReeccooggnniizzeedd EExxpprreessssiioonnss
       * 4:49
       * 4:49:30
       * 4:49:30.2
       * yesterday
       * yesterday {time}
       * last week
       * last month
       * last year
       * October 26, 1981 or Oct 26, 1981
       * October 26 or Oct 26
       * 26 October 1981
       * 26 Oct 1981
       * 26 Oct 81
       * 10/26/1981 or 10-26-1981
       * 10/26/81 or 10-26-81
       * 1981/10/26 or 1981-10-26
       * 10/26 or 10-26
       * {any explicit date} {time}

AAUUTTHHOORR
       Jeff Nelson, Cinchapi Software Collective
       jeff@cinchapi.org




                                  March 2015                           CASH(1)
