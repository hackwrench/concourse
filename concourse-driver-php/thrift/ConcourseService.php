<?php
namespace thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The interface definition for the Concourse Server API. This API defines
 * the methods that are necessary to perform CRUD operations on data in
 * accordance with the Concourse data model.
 */
interface ConcourseServiceIf {
  /**
   * Login to the service and receive an AccessToken, which is required for
   * all CRUD operations. The AccessToken has an undocumented TTL, so clients
   * must be prepared to handle token expiration for active clients.
   * 
   * @param username
   * @param password
   * @param environment
   * @return AccessToken
   * @throws TSecurityException
   * 
   * @param string $username
   * @param string $password
   * @param string $environment
   * @return \thrift\shared\AccessToken A temporary token that is returned by the
   * {@link ConcourseService#login(String, String)} method to grant access
   * to secure resources in place of raw credentials.
   * 
   * @throws \thrift\shared\TSecurityException
   */
  public function login($username, $password, $environment);
  /**
   * Logout of the service and immediately expire the access token. For
   * optimal security, the client should also discard the token after
   * invoking this method.
   * 
   * @param token
   * @param environment
   * @throws TSecurityException
   * 
   * @param \thrift\shared\AccessToken $token
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   */
  public function logout(\thrift\shared\AccessToken $token, $environment);
  /**
   * Start a new transaction.
   * 
   * This method will turn on STAGING mode so that all subsequent changes are
   * collected in an isolated buffer before possibly being committed to the
   * database. Staged operations are guaranteed to be reliable, all or nothing
   * units of work that allow correct  recovery from failures and provide
   * isolation between clients so the database is always in a consistent state.
   * 
   * After this method returns, all subsequent operations will be done in
   * {@code staging} mode until either #abort(shared.AccessToken) or
   * #commit(shared.AccessToken) is invoked.
   * 
   * 
   * @param token
   * @param environment
   * @return TransactionToken
   * @throws TSecurityException
   * 
   * @param \thrift\shared\AccessToken $token
   * @param string $environment
   * @return \thrift\shared\TransactionToken A token that identifies a Transaction.
   * 
   * @throws \thrift\shared\TSecurityException
   */
  public function stage(\thrift\shared\AccessToken $token, $environment);
  /**
   * Abort the current transaction, if one exists.
   * 
   * This method will discard any changes that are currently sitting in the
   * staging area. After this function returns, all subsequent operations will
   * commit to the database immediately until #stage(shared.AccessToken) is
   * called.
   * 
   * @param creds
   * @param transaction
   * @param environment
   * @throws TSecurityException
   * 
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   */
  public function abort(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * Commit the current transaction, if one exists.
   * 
   * This method will attempt to permanently commit all the changes that are
   * currently sitting in the staging area. This function only returns TRUE
   * if all the changes can be successfully applied to the database. Otherwise,
   * this function returns FALSE and all the changes are discarded.
   * 
   * After this function returns, all subsequent operations will commit to the
   * database immediately until #stage(shared.AccessToken) is invoked.
   * 
   * @param creds
   * @param transaction
   * @param environment
   * @return boolean
   * @throws TSecurityException
   * @throws TTransactionException
   * 
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function commit(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function addKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function addKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function addKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function clearRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function clearRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function clearKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function clearKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function clearKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function clearKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $json
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function insertJson($json, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $json
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function insertJsonRecord($json, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $json
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function insertJsonRecords($json, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function removeKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function removeKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function setKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function setKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function setKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function find(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function browseKey($key, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function browseKeys(array $keys, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function browseKeyTime($key, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function browseKeysTime(array $keys, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function describeRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function describeRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function describeRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function describeRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function selectCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function selectCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function selectKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function selectKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function selectKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function selectKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function getCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function getCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function getKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function getKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function getKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function getKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function verifyKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function verifyKeyValueRecordTime($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param bool $identifier
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function jsonifyRecords(array $records, $identifier, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param bool $identifier
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function findCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   * @throws \thrift\shared\TParseException
   */
  public function findCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \thrift\data\TObject[] $values
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function findKeyOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \thrift\data\TObject[] $values
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function findKeyStringOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function findKeyStringOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param string $query
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function search($key, $query, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function auditRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function auditRecordStart($record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function auditRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function auditKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function auditKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function chronologizeKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function chronologizeKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function revertKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function revertKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function revertKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function pingRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function pingRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $expected
   * @param int $record
   * @param \thrift\data\TObject $replacement
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function verifyAndSwap($key, \thrift\data\TObject $expected, $record, \thrift\data\TObject $replacement, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function verifyOrSet($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment);
  /**
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $token
   * @param string $environment
   * @return string
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getServerEnvironment(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $token, $environment);
  /**
   * @return string
   * @throws \thrift\shared\TSecurityException
   * @throws \thrift\shared\TTransactionException
   */
  public function getServerVersion();
}

class ConcourseServiceClient implements \thrift\ConcourseServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function login($username, $password, $environment)
  {
    $this->send_login($username, $password, $environment);
    return $this->recv_login();
  }

  public function send_login($username, $password, $environment)
  {
    $args = new \thrift\ConcourseService_login_args();
    $args->username = $username;
    $args->password = $password;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("login failed: unknown result");
  }

  public function logout(\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_logout($token, $environment);
    $this->recv_logout();
  }

  public function send_logout(\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \thrift\ConcourseService_logout_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logout', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logout', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logout()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_logout_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_logout_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function stage(\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_stage($token, $environment);
    return $this->recv_stage();
  }

  public function send_stage(\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \thrift\ConcourseService_stage_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_stage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_stage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("stage failed: unknown result");
  }

  public function abort(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_abort($creds, $transaction, $environment);
    $this->recv_abort();
  }

  public function send_abort(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_abort_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'abort', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('abort', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_abort()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_abort_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_abort_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function commit(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_commit($creds, $transaction, $environment);
    return $this->recv_commit();
  }

  public function send_commit(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_commit_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_commit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_commit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("commit failed: unknown result");
  }

  public function addKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_addKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecord();
  }

  public function send_addKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_addKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_addKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_addKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("addKeyValueRecord failed: unknown result");
  }

  public function addKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_addKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_addKeyValue();
  }

  public function send_addKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_addKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_addKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_addKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("addKeyValue failed: unknown result");
  }

  public function addKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_addKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecords();
  }

  public function send_addKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_addKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_addKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_addKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("addKeyValueRecords failed: unknown result");
  }

  public function clearRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_clearRecord($record, $creds, $transaction, $environment);
    $this->recv_clearRecord();
  }

  public function send_clearRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_clearRecords($records, $creds, $transaction, $environment);
    $this->recv_clearRecords();
  }

  public function send_clearRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_clearKeyRecord($key, $record, $creds, $transaction, $environment);
    $this->recv_clearKeyRecord();
  }

  public function send_clearKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_clearKeysRecord($keys, $record, $creds, $transaction, $environment);
    $this->recv_clearKeysRecord();
  }

  public function send_clearKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_clearKeyRecords($key, $records, $creds, $transaction, $environment);
    $this->recv_clearKeyRecords();
  }

  public function send_clearKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_clearKeysRecords($keys, $records, $creds, $transaction, $environment);
    $this->recv_clearKeysRecords();
  }

  public function send_clearKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function insertJson($json, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_insertJson($json, $creds, $transaction, $environment);
    return $this->recv_insertJson();
  }

  public function send_insertJson($json, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_insertJson_args();
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_insertJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_insertJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("insertJson failed: unknown result");
  }

  public function insertJsonRecord($json, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_insertJsonRecord($json, $record, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecord();
  }

  public function send_insertJsonRecord($json, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_insertJsonRecord_args();
    $args->json = $json;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_insertJsonRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_insertJsonRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("insertJsonRecord failed: unknown result");
  }

  public function insertJsonRecords($json, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_insertJsonRecords($json, $records, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecords();
  }

  public function send_insertJsonRecords($json, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_insertJsonRecords_args();
    $args->json = $json;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_insertJsonRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_insertJsonRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("insertJsonRecords failed: unknown result");
  }

  public function removeKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_removeKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecord();
  }

  public function send_removeKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_removeKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_removeKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_removeKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("removeKeyValueRecord failed: unknown result");
  }

  public function removeKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_removeKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecords();
  }

  public function send_removeKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_removeKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_removeKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_removeKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("removeKeyValueRecords failed: unknown result");
  }

  public function setKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_setKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecord();
  }

  public function send_setKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_setKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_setKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_setKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function setKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_setKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_setKeyValue();
  }

  public function send_setKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_setKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_setKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_setKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("setKeyValue failed: unknown result");
  }

  public function setKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_setKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecords();
  }

  public function send_setKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_setKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_setKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_setKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function find(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_find($creds, $transaction, $environment);
    return $this->recv_find();
  }

  public function send_find(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_find_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'find', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('find', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_find()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_find_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_find_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("find failed: unknown result");
  }

  public function selectRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectRecord($record, $creds, $transaction, $environment);
    return $this->recv_selectRecord();
  }

  public function send_selectRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecord failed: unknown result");
  }

  public function selectRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectRecords($records, $creds, $transaction, $environment);
    return $this->recv_selectRecords();
  }

  public function send_selectRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecords failed: unknown result");
  }

  public function selectRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTime();
  }

  public function send_selectRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordTime failed: unknown result");
  }

  public function selectRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTime();
  }

  public function send_selectRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordsTime failed: unknown result");
  }

  public function browseKey($key, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_browseKey($key, $creds, $transaction, $environment);
    return $this->recv_browseKey();
  }

  public function send_browseKey($key, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKey_args();
    $args->key = $key;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKey', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKey', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKey()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKey_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKey_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKey failed: unknown result");
  }

  public function browseKeys(array $keys, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_browseKeys($keys, $creds, $transaction, $environment);
    return $this->recv_browseKeys();
  }

  public function send_browseKeys(array $keys, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeys_args();
    $args->keys = $keys;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeys', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeys', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeys()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeys_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeys_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeys failed: unknown result");
  }

  public function browseKeyTime($key, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_browseKeyTime($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTime();
  }

  public function send_browseKeyTime($key, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeyTime_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeyTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeyTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeyTime failed: unknown result");
  }

  public function browseKeysTime(array $keys, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_browseKeysTime($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTime();
  }

  public function send_browseKeysTime(array $keys, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeysTime_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeysTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeysTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeysTime failed: unknown result");
  }

  public function describeRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_describeRecord($record, $creds, $transaction, $environment);
    return $this->recv_describeRecord();
  }

  public function send_describeRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecord failed: unknown result");
  }

  public function describeRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_describeRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTime();
  }

  public function send_describeRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordTime failed: unknown result");
  }

  public function describeRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_describeRecords($records, $creds, $transaction, $environment);
    return $this->recv_describeRecords();
  }

  public function send_describeRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecords failed: unknown result");
  }

  public function describeRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_describeRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTime();
  }

  public function send_describeRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordsTime failed: unknown result");
  }

  public function selectKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecord();
  }

  public function send_selectKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecord failed: unknown result");
  }

  public function selectKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTime();
  }

  public function send_selectKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordTime failed: unknown result");
  }

  public function selectKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecord();
  }

  public function send_selectKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecord failed: unknown result");
  }

  public function selectKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTime();
  }

  public function send_selectKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordTime failed: unknown result");
  }

  public function selectKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecords();
  }

  public function send_selectKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecords failed: unknown result");
  }

  public function selectKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecords();
  }

  public function send_selectKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecords failed: unknown result");
  }

  public function selectKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTime();
  }

  public function send_selectKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordsTime failed: unknown result");
  }

  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTime();
  }

  public function send_selectKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordsTime failed: unknown result");
  }

  public function selectCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_selectCriteria();
  }

  public function send_selectCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteria failed: unknown result");
  }

  public function selectCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_selectCcl();
  }

  public function send_selectCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCcl failed: unknown result");
  }

  public function selectCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTime();
  }

  public function send_selectCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteriaTime failed: unknown result");
  }

  public function selectCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTime();
  }

  public function send_selectCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTime failed: unknown result");
  }

  public function selectKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteria();
  }

  public function send_selectKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteria failed: unknown result");
  }

  public function selectKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeyCcl();
  }

  public function send_selectKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCcl failed: unknown result");
  }

  public function selectKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTime();
  }

  public function send_selectKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteriaTime failed: unknown result");
  }

  public function selectKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTime();
  }

  public function send_selectKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTime failed: unknown result");
  }

  public function selectKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteria();
  }

  public function send_selectKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteria failed: unknown result");
  }

  public function selectKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeysCcl();
  }

  public function send_selectKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCcl failed: unknown result");
  }

  public function selectKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTime();
  }

  public function send_selectKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteriaTime failed: unknown result");
  }

  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_selectKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTime();
  }

  public function send_selectKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTime failed: unknown result");
  }

  public function getKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_getKeyRecord();
  }

  public function send_getKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecord failed: unknown result");
  }

  public function getKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTime();
  }

  public function send_getKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordTime failed: unknown result");
  }

  public function getKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_getKeysRecord();
  }

  public function send_getKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecord failed: unknown result");
  }

  public function getKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTime();
  }

  public function send_getKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordTime failed: unknown result");
  }

  public function getKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_getKeysRecords();
  }

  public function send_getKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecords failed: unknown result");
  }

  public function getKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_getKeyRecords();
  }

  public function send_getKeyRecords($key, array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecords failed: unknown result");
  }

  public function getKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTime();
  }

  public function send_getKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordsTime failed: unknown result");
  }

  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTime();
  }

  public function send_getKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordsTime failed: unknown result");
  }

  public function getKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteria();
  }

  public function send_getKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteria failed: unknown result");
  }

  public function getCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_getCriteria();
  }

  public function send_getCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteria failed: unknown result");
  }

  public function getCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_getCcl();
  }

  public function send_getCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCcl failed: unknown result");
  }

  public function getCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTime();
  }

  public function send_getCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteriaTime failed: unknown result");
  }

  public function getCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTime();
  }

  public function send_getCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTime failed: unknown result");
  }

  public function getKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeyCcl();
  }

  public function send_getKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCcl failed: unknown result");
  }

  public function getKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTime();
  }

  public function send_getKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteriaTime failed: unknown result");
  }

  public function getKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTime();
  }

  public function send_getKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTime failed: unknown result");
  }

  public function getKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteria();
  }

  public function send_getKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteria failed: unknown result");
  }

  public function getKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeysCcl();
  }

  public function send_getKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCcl failed: unknown result");
  }

  public function getKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTime();
  }

  public function send_getKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteriaTime failed: unknown result");
  }

  public function getKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_getKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTime();
  }

  public function send_getKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTime failed: unknown result");
  }

  public function verifyKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_verifyKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecord();
  }

  public function send_verifyKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecord failed: unknown result");
  }

  public function verifyKeyValueRecordTime($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTime($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTime();
  }

  public function send_verifyKeyValueRecordTime($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyKeyValueRecordTime_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyKeyValueRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyKeyValueRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecordTime failed: unknown result");
  }

  public function jsonifyRecords(array $records, $identifier, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_jsonifyRecords($records, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecords();
  }

  public function send_jsonifyRecords(array $records, $identifier, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_jsonifyRecords_args();
    $args->records = $records;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_jsonifyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_jsonifyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecords failed: unknown result");
  }

  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_jsonifyRecordsTime($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTime();
  }

  public function send_jsonifyRecordsTime(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_jsonifyRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_jsonifyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_jsonifyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecordsTime failed: unknown result");
  }

  public function findCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_findCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_findCriteria();
  }

  public function send_findCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findCriteria failed: unknown result");
  }

  public function findCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_findCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_findCcl();
  }

  public function send_findCcl($ccl, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findCcl failed: unknown result");
  }

  public function findKeyOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_findKeyOperatorValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValues();
  }

  public function send_findKeyOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValues failed: unknown result");
  }

  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTime();
  }

  public function send_findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValuesTime failed: unknown result");
  }

  public function findKeyStringOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_findKeyStringOperatorValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyStringOperatorValues();
  }

  public function send_findKeyStringOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyStringOperatorValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyStringOperatorValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyStringOperatorValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyStringOperatorValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyStringOperatorValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyStringOperatorValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyStringOperatorValues failed: unknown result");
  }

  public function findKeyStringOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_findKeyStringOperatorValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyStringOperatorValuesTime();
  }

  public function send_findKeyStringOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyStringOperatorValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyStringOperatorValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyStringOperatorValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyStringOperatorValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyStringOperatorValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyStringOperatorValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyStringOperatorValuesTime failed: unknown result");
  }

  public function search($key, $query, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_search($key, $query, $creds, $transaction, $environment);
    return $this->recv_search();
  }

  public function send_search($key, $query, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_search_args();
    $args->key = $key;
    $args->query = $query;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_search_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("search failed: unknown result");
  }

  public function auditRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_auditRecord($record, $creds, $transaction, $environment);
    return $this->recv_auditRecord();
  }

  public function send_auditRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecord failed: unknown result");
  }

  public function auditRecordStart($record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_auditRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStart();
  }

  public function send_auditRecordStart($record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStart failed: unknown result");
  }

  public function auditRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_auditRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartEnd();
  }

  public function send_auditRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStartEnd failed: unknown result");
  }

  public function auditKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_auditKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecord();
  }

  public function send_auditKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecord failed: unknown result");
  }

  public function auditKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_auditKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStart();
  }

  public function send_auditKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStart failed: unknown result");
  }

  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_auditKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartEnd();
  }

  public function send_auditKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStartEnd failed: unknown result");
  }

  public function chronologizeKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_chronologizeKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecord();
  }

  public function send_chronologizeKeyRecord($key, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecord failed: unknown result");
  }

  public function chronologizeKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStart();
  }

  public function send_chronologizeKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStart failed: unknown result");
  }

  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartEnd();
  }

  public function send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStartEnd failed: unknown result");
  }

  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_revertKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTime();
  }

  public function send_revertKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_revertKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTime();
  }

  public function send_revertKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_revertKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTime();
  }

  public function send_revertKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_revertKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTime();
  }

  public function send_revertKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function pingRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_pingRecords($records, $creds, $transaction, $environment);
    return $this->recv_pingRecords();
  }

  public function send_pingRecords(array $records, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_pingRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_pingRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_pingRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecords failed: unknown result");
  }

  public function pingRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_pingRecord($record, $creds, $transaction, $environment);
    return $this->recv_pingRecord();
  }

  public function send_pingRecord($record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_pingRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_pingRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_pingRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecord failed: unknown result");
  }

  public function verifyAndSwap($key, \thrift\data\TObject $expected, $record, \thrift\data\TObject $replacement, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_verifyAndSwap($key, $expected, $record, $replacement, $creds, $transaction, $environment);
    return $this->recv_verifyAndSwap();
  }

  public function send_verifyAndSwap($key, \thrift\data\TObject $expected, $record, \thrift\data\TObject $replacement, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyAndSwap_args();
    $args->key = $key;
    $args->expected = $expected;
    $args->record = $record;
    $args->replacement = $replacement;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyAndSwap', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyAndSwap', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyAndSwap()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyAndSwap_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyAndSwap_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyAndSwap failed: unknown result");
  }

  public function verifyOrSet($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $this->send_verifyOrSet($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_verifyOrSet();
  }

  public function send_verifyOrSet($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyOrSet_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyOrSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyOrSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyOrSet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyOrSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyOrSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function getServerEnvironment(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $token, $environment)
  {
    $this->send_getServerEnvironment($creds, $token, $environment);
    return $this->recv_getServerEnvironment();
  }

  public function send_getServerEnvironment(\thrift\shared\AccessToken $creds, \thrift\shared\TransactionToken $token, $environment)
  {
    $args = new \thrift\ConcourseService_getServerEnvironment_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerEnvironment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerEnvironment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerEnvironment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getServerEnvironment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getServerEnvironment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerEnvironment failed: unknown result");
  }

  public function getServerVersion()
  {
    $this->send_getServerVersion();
    return $this->recv_getServerVersion();
  }

  public function send_getServerVersion()
  {
    $args = new \thrift\ConcourseService_getServerVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getServerVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getServerVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerVersion failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ConcourseService_login_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_args');
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 1);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 2);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\shared\AccessToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TransactionToken
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\shared\TransactionToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_abort_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_abort_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->records []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = false;
              $xfer += $input->readI64($key12);
              $xfer += $input->readBool($val13);
              $this->success[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter14 => $viter15)
          {
            $xfer += $output->writeI64($kiter14);
            $xfer += $output->writeBool($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readI64($elem21);
              $this->records []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter22)
          {
            $xfer += $output->writeI64($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $xfer += $input->readString($elem28);
              $this->keys []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter29)
          {
            $xfer += $output->writeString($iter29);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readI64($elem35);
              $this->records []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter36)
          {
            $xfer += $output->writeI64($iter36);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $xfer += $input->readString($elem42);
              $this->keys []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size43 = 0;
            $_etype46 = 0;
            $xfer += $input->readListBegin($_etype46, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $xfer += $input->readI64($elem48);
              $this->records []= $elem48;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter49)
          {
            $xfer += $output->writeString($iter49);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter50)
          {
            $xfer += $output->writeI64($iter50);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size51 = 0;
            $_etype54 = 0;
            $xfer += $input->readSetBegin($_etype54, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $xfer += $input->readI64($elem56);
              if (is_scalar($elem56)) {
                $this->success[$elem56] = true;
              } else {
                $this->success []= $elem56;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter57 => $iter58)
          {
            if (is_scalar($iter58)) {
            $xfer += $output->writeI64($iter57);
            } else {
            $xfer += $output->writeI64($iter58);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size59 = 0;
            $_etype62 = 0;
            $xfer += $input->readListBegin($_etype62, $_size59);
            for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
            {
              $elem64 = null;
              $xfer += $input->readI64($elem64);
              $this->records []= $elem64;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter65)
          {
            $xfer += $output->writeI64($iter65);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size66 = 0;
            $_ktype67 = 0;
            $_vtype68 = 0;
            $xfer += $input->readMapBegin($_ktype67, $_vtype68, $_size66);
            for ($_i70 = 0; $_i70 < $_size66; ++$_i70)
            {
              $key71 = 0;
              $val72 = false;
              $xfer += $input->readI64($key71);
              $xfer += $input->readBool($val72);
              $this->success[$key71] = $val72;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter73 => $viter74)
          {
            $xfer += $output->writeI64($kiter73);
            $xfer += $output->writeBool($viter74);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size75 = 0;
            $_etype78 = 0;
            $xfer += $input->readListBegin($_etype78, $_size75);
            for ($_i79 = 0; $_i79 < $_size75; ++$_i79)
            {
              $elem80 = null;
              $xfer += $input->readI64($elem80);
              $this->records []= $elem80;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter81)
          {
            $xfer += $output->writeI64($iter81);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size82 = 0;
            $_ktype83 = 0;
            $_vtype84 = 0;
            $xfer += $input->readMapBegin($_ktype83, $_vtype84, $_size82);
            for ($_i86 = 0; $_i86 < $_size82; ++$_i86)
            {
              $key87 = 0;
              $val88 = false;
              $xfer += $input->readI64($key87);
              $xfer += $input->readBool($val88);
              $this->success[$key87] = $val88;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter89 => $viter90)
          {
            $xfer += $output->writeI64($kiter89);
            $xfer += $output->writeBool($viter90);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $xfer += $input->readI64($elem96);
              $this->records []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter97)
          {
            $xfer += $output->writeI64($iter97);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_find_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_find_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_find_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_find_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_find_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readSetBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $xfer += $input->readI64($elem103);
              if (is_scalar($elem103)) {
                $this->success[$elem103] = true;
              } else {
                $this->success []= $elem103;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_find_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter104 => $iter105)
          {
            if (is_scalar($iter105)) {
            $xfer += $output->writeI64($iter104);
            } else {
            $xfer += $output->writeI64($iter105);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size106 = 0;
            $_ktype107 = 0;
            $_vtype108 = 0;
            $xfer += $input->readMapBegin($_ktype107, $_vtype108, $_size106);
            for ($_i110 = 0; $_i110 < $_size106; ++$_i110)
            {
              $key111 = '';
              $val112 = array();
              $xfer += $input->readString($key111);
              $val112 = array();
              $_size113 = 0;
              $_etype116 = 0;
              $xfer += $input->readSetBegin($_etype116, $_size113);
              for ($_i117 = 0; $_i117 < $_size113; ++$_i117)
              {
                $elem118 = null;
                $elem118 = new \thrift\data\TObject();
                $xfer += $elem118->read($input);
                if (is_scalar($elem118)) {
                  $val112[$elem118] = true;
                } else {
                  $val112 []= $elem118;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key111] = $val112;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter119 => $viter120)
          {
            $xfer += $output->writeString($kiter119);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter120));
              {
                foreach ($viter120 as $iter121 => $iter122)
                {
                  if (is_scalar($iter122)) {
                  $xfer += $iter121->write($output);
                  } else {
                  $xfer += $iter122->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size123 = 0;
            $_etype126 = 0;
            $xfer += $input->readListBegin($_etype126, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $elem128 = null;
              $xfer += $input->readI64($elem128);
              $this->records []= $elem128;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter129)
          {
            $xfer += $output->writeI64($iter129);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size130 = 0;
            $_ktype131 = 0;
            $_vtype132 = 0;
            $xfer += $input->readMapBegin($_ktype131, $_vtype132, $_size130);
            for ($_i134 = 0; $_i134 < $_size130; ++$_i134)
            {
              $key135 = 0;
              $val136 = array();
              $xfer += $input->readI64($key135);
              $val136 = array();
              $_size137 = 0;
              $_ktype138 = 0;
              $_vtype139 = 0;
              $xfer += $input->readMapBegin($_ktype138, $_vtype139, $_size137);
              for ($_i141 = 0; $_i141 < $_size137; ++$_i141)
              {
                $key142 = '';
                $val143 = array();
                $xfer += $input->readString($key142);
                $val143 = array();
                $_size144 = 0;
                $_etype147 = 0;
                $xfer += $input->readSetBegin($_etype147, $_size144);
                for ($_i148 = 0; $_i148 < $_size144; ++$_i148)
                {
                  $elem149 = null;
                  $elem149 = new \thrift\data\TObject();
                  $xfer += $elem149->read($input);
                  if (is_scalar($elem149)) {
                    $val143[$elem149] = true;
                  } else {
                    $val143 []= $elem149;
                  }
                }
                $xfer += $input->readSetEnd();
                $val136[$key142] = $val143;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key135] = $val136;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter150 => $viter151)
          {
            $xfer += $output->writeI64($kiter150);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter151));
              {
                foreach ($viter151 as $kiter152 => $viter153)
                {
                  $xfer += $output->writeString($kiter152);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter153));
                    {
                      foreach ($viter153 as $iter154 => $iter155)
                      {
                        if (is_scalar($iter155)) {
                        $xfer += $iter154->write($output);
                        } else {
                        $xfer += $iter155->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size156 = 0;
            $_ktype157 = 0;
            $_vtype158 = 0;
            $xfer += $input->readMapBegin($_ktype157, $_vtype158, $_size156);
            for ($_i160 = 0; $_i160 < $_size156; ++$_i160)
            {
              $key161 = '';
              $val162 = array();
              $xfer += $input->readString($key161);
              $val162 = array();
              $_size163 = 0;
              $_etype166 = 0;
              $xfer += $input->readSetBegin($_etype166, $_size163);
              for ($_i167 = 0; $_i167 < $_size163; ++$_i167)
              {
                $elem168 = null;
                $elem168 = new \thrift\data\TObject();
                $xfer += $elem168->read($input);
                if (is_scalar($elem168)) {
                  $val162[$elem168] = true;
                } else {
                  $val162 []= $elem168;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key161] = $val162;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter169 => $viter170)
          {
            $xfer += $output->writeString($kiter169);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter170));
              {
                foreach ($viter170 as $iter171 => $iter172)
                {
                  if (is_scalar($iter172)) {
                  $xfer += $iter171->write($output);
                  } else {
                  $xfer += $iter172->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size173 = 0;
            $_etype176 = 0;
            $xfer += $input->readListBegin($_etype176, $_size173);
            for ($_i177 = 0; $_i177 < $_size173; ++$_i177)
            {
              $elem178 = null;
              $xfer += $input->readI64($elem178);
              $this->records []= $elem178;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter179)
          {
            $xfer += $output->writeI64($iter179);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size180 = 0;
            $_ktype181 = 0;
            $_vtype182 = 0;
            $xfer += $input->readMapBegin($_ktype181, $_vtype182, $_size180);
            for ($_i184 = 0; $_i184 < $_size180; ++$_i184)
            {
              $key185 = 0;
              $val186 = array();
              $xfer += $input->readI64($key185);
              $val186 = array();
              $_size187 = 0;
              $_ktype188 = 0;
              $_vtype189 = 0;
              $xfer += $input->readMapBegin($_ktype188, $_vtype189, $_size187);
              for ($_i191 = 0; $_i191 < $_size187; ++$_i191)
              {
                $key192 = '';
                $val193 = array();
                $xfer += $input->readString($key192);
                $val193 = array();
                $_size194 = 0;
                $_etype197 = 0;
                $xfer += $input->readSetBegin($_etype197, $_size194);
                for ($_i198 = 0; $_i198 < $_size194; ++$_i198)
                {
                  $elem199 = null;
                  $elem199 = new \thrift\data\TObject();
                  $xfer += $elem199->read($input);
                  if (is_scalar($elem199)) {
                    $val193[$elem199] = true;
                  } else {
                    $val193 []= $elem199;
                  }
                }
                $xfer += $input->readSetEnd();
                $val186[$key192] = $val193;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key185] = $val186;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter200 => $viter201)
          {
            $xfer += $output->writeI64($kiter200);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter201));
              {
                foreach ($viter201 as $kiter202 => $viter203)
                {
                  $xfer += $output->writeString($kiter202);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter203));
                    {
                      foreach ($viter203 as $iter204 => $iter205)
                      {
                        if (is_scalar($iter205)) {
                        $xfer += $iter204->write($output);
                        } else {
                        $xfer += $iter205->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size206 = 0;
            $_ktype207 = 0;
            $_vtype208 = 0;
            $xfer += $input->readMapBegin($_ktype207, $_vtype208, $_size206);
            for ($_i210 = 0; $_i210 < $_size206; ++$_i210)
            {
              $key211 = new \thrift\data\TObject();
              $val212 = array();
              $key211 = new \thrift\data\TObject();
              $xfer += $key211->read($input);
              $val212 = array();
              $_size213 = 0;
              $_etype216 = 0;
              $xfer += $input->readSetBegin($_etype216, $_size213);
              for ($_i217 = 0; $_i217 < $_size213; ++$_i217)
              {
                $elem218 = null;
                $xfer += $input->readI64($elem218);
                if (is_scalar($elem218)) {
                  $val212[$elem218] = true;
                } else {
                  $val212 []= $elem218;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key211] = $val212;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter219 => $viter220)
          {
            $xfer += $kiter219->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter220));
              {
                foreach ($viter220 as $iter221 => $iter222)
                {
                  if (is_scalar($iter222)) {
                  $xfer += $output->writeI64($iter221);
                  } else {
                  $xfer += $output->writeI64($iter222);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size223 = 0;
            $_etype226 = 0;
            $xfer += $input->readListBegin($_etype226, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $elem228 = null;
              $xfer += $input->readString($elem228);
              $this->keys []= $elem228;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter229)
          {
            $xfer += $output->writeString($iter229);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size230 = 0;
            $_ktype231 = 0;
            $_vtype232 = 0;
            $xfer += $input->readMapBegin($_ktype231, $_vtype232, $_size230);
            for ($_i234 = 0; $_i234 < $_size230; ++$_i234)
            {
              $key235 = '';
              $val236 = array();
              $xfer += $input->readString($key235);
              $val236 = array();
              $_size237 = 0;
              $_ktype238 = 0;
              $_vtype239 = 0;
              $xfer += $input->readMapBegin($_ktype238, $_vtype239, $_size237);
              for ($_i241 = 0; $_i241 < $_size237; ++$_i241)
              {
                $key242 = new \thrift\data\TObject();
                $val243 = array();
                $key242 = new \thrift\data\TObject();
                $xfer += $key242->read($input);
                $val243 = array();
                $_size244 = 0;
                $_etype247 = 0;
                $xfer += $input->readSetBegin($_etype247, $_size244);
                for ($_i248 = 0; $_i248 < $_size244; ++$_i248)
                {
                  $elem249 = null;
                  $xfer += $input->readI64($elem249);
                  if (is_scalar($elem249)) {
                    $val243[$elem249] = true;
                  } else {
                    $val243 []= $elem249;
                  }
                }
                $xfer += $input->readSetEnd();
                $val236[$key242] = $val243;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key235] = $val236;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter250 => $viter251)
          {
            $xfer += $output->writeString($kiter250);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter251));
              {
                foreach ($viter251 as $kiter252 => $viter253)
                {
                  $xfer += $kiter252->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter253));
                    {
                      foreach ($viter253 as $iter254 => $iter255)
                      {
                        if (is_scalar($iter255)) {
                        $xfer += $output->writeI64($iter254);
                        } else {
                        $xfer += $output->writeI64($iter255);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size256 = 0;
            $_ktype257 = 0;
            $_vtype258 = 0;
            $xfer += $input->readMapBegin($_ktype257, $_vtype258, $_size256);
            for ($_i260 = 0; $_i260 < $_size256; ++$_i260)
            {
              $key261 = new \thrift\data\TObject();
              $val262 = array();
              $key261 = new \thrift\data\TObject();
              $xfer += $key261->read($input);
              $val262 = array();
              $_size263 = 0;
              $_etype266 = 0;
              $xfer += $input->readSetBegin($_etype266, $_size263);
              for ($_i267 = 0; $_i267 < $_size263; ++$_i267)
              {
                $elem268 = null;
                $xfer += $input->readI64($elem268);
                if (is_scalar($elem268)) {
                  $val262[$elem268] = true;
                } else {
                  $val262 []= $elem268;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key261] = $val262;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter269 => $viter270)
          {
            $xfer += $kiter269->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter270));
              {
                foreach ($viter270 as $iter271 => $iter272)
                {
                  if (is_scalar($iter272)) {
                  $xfer += $output->writeI64($iter271);
                  } else {
                  $xfer += $output->writeI64($iter272);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size273 = 0;
            $_etype276 = 0;
            $xfer += $input->readListBegin($_etype276, $_size273);
            for ($_i277 = 0; $_i277 < $_size273; ++$_i277)
            {
              $elem278 = null;
              $xfer += $input->readString($elem278);
              $this->keys []= $elem278;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter279)
          {
            $xfer += $output->writeString($iter279);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size280 = 0;
            $_ktype281 = 0;
            $_vtype282 = 0;
            $xfer += $input->readMapBegin($_ktype281, $_vtype282, $_size280);
            for ($_i284 = 0; $_i284 < $_size280; ++$_i284)
            {
              $key285 = '';
              $val286 = array();
              $xfer += $input->readString($key285);
              $val286 = array();
              $_size287 = 0;
              $_ktype288 = 0;
              $_vtype289 = 0;
              $xfer += $input->readMapBegin($_ktype288, $_vtype289, $_size287);
              for ($_i291 = 0; $_i291 < $_size287; ++$_i291)
              {
                $key292 = new \thrift\data\TObject();
                $val293 = array();
                $key292 = new \thrift\data\TObject();
                $xfer += $key292->read($input);
                $val293 = array();
                $_size294 = 0;
                $_etype297 = 0;
                $xfer += $input->readSetBegin($_etype297, $_size294);
                for ($_i298 = 0; $_i298 < $_size294; ++$_i298)
                {
                  $elem299 = null;
                  $xfer += $input->readI64($elem299);
                  if (is_scalar($elem299)) {
                    $val293[$elem299] = true;
                  } else {
                    $val293 []= $elem299;
                  }
                }
                $xfer += $input->readSetEnd();
                $val286[$key292] = $val293;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key285] = $val286;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter300 => $viter301)
          {
            $xfer += $output->writeString($kiter300);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter301));
              {
                foreach ($viter301 as $kiter302 => $viter303)
                {
                  $xfer += $kiter302->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter303));
                    {
                      foreach ($viter303 as $iter304 => $iter305)
                      {
                        if (is_scalar($iter305)) {
                        $xfer += $output->writeI64($iter304);
                        } else {
                        $xfer += $output->writeI64($iter305);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size306 = 0;
            $_etype309 = 0;
            $xfer += $input->readSetBegin($_etype309, $_size306);
            for ($_i310 = 0; $_i310 < $_size306; ++$_i310)
            {
              $elem311 = null;
              $xfer += $input->readString($elem311);
              if (is_scalar($elem311)) {
                $this->success[$elem311] = true;
              } else {
                $this->success []= $elem311;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter312 => $iter313)
          {
            if (is_scalar($iter313)) {
            $xfer += $output->writeString($iter312);
            } else {
            $xfer += $output->writeString($iter313);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size314 = 0;
            $_etype317 = 0;
            $xfer += $input->readSetBegin($_etype317, $_size314);
            for ($_i318 = 0; $_i318 < $_size314; ++$_i318)
            {
              $elem319 = null;
              $xfer += $input->readString($elem319);
              if (is_scalar($elem319)) {
                $this->success[$elem319] = true;
              } else {
                $this->success []= $elem319;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter320 => $iter321)
          {
            if (is_scalar($iter321)) {
            $xfer += $output->writeString($iter320);
            } else {
            $xfer += $output->writeString($iter321);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size322 = 0;
            $_etype325 = 0;
            $xfer += $input->readListBegin($_etype325, $_size322);
            for ($_i326 = 0; $_i326 < $_size322; ++$_i326)
            {
              $elem327 = null;
              $xfer += $input->readI64($elem327);
              $this->records []= $elem327;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter328)
          {
            $xfer += $output->writeI64($iter328);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size329 = 0;
            $_ktype330 = 0;
            $_vtype331 = 0;
            $xfer += $input->readMapBegin($_ktype330, $_vtype331, $_size329);
            for ($_i333 = 0; $_i333 < $_size329; ++$_i333)
            {
              $key334 = 0;
              $val335 = array();
              $xfer += $input->readI64($key334);
              $val335 = array();
              $_size336 = 0;
              $_etype339 = 0;
              $xfer += $input->readSetBegin($_etype339, $_size336);
              for ($_i340 = 0; $_i340 < $_size336; ++$_i340)
              {
                $elem341 = null;
                $xfer += $input->readString($elem341);
                if (is_scalar($elem341)) {
                  $val335[$elem341] = true;
                } else {
                  $val335 []= $elem341;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key334] = $val335;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter342 => $viter343)
          {
            $xfer += $output->writeI64($kiter342);
            {
              $output->writeSetBegin(TType::STRING, count($viter343));
              {
                foreach ($viter343 as $iter344 => $iter345)
                {
                  if (is_scalar($iter345)) {
                  $xfer += $output->writeString($iter344);
                  } else {
                  $xfer += $output->writeString($iter345);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size346 = 0;
            $_etype349 = 0;
            $xfer += $input->readListBegin($_etype349, $_size346);
            for ($_i350 = 0; $_i350 < $_size346; ++$_i350)
            {
              $elem351 = null;
              $xfer += $input->readI64($elem351);
              $this->records []= $elem351;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter352)
          {
            $xfer += $output->writeI64($iter352);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size353 = 0;
            $_ktype354 = 0;
            $_vtype355 = 0;
            $xfer += $input->readMapBegin($_ktype354, $_vtype355, $_size353);
            for ($_i357 = 0; $_i357 < $_size353; ++$_i357)
            {
              $key358 = 0;
              $val359 = array();
              $xfer += $input->readI64($key358);
              $val359 = array();
              $_size360 = 0;
              $_etype363 = 0;
              $xfer += $input->readSetBegin($_etype363, $_size360);
              for ($_i364 = 0; $_i364 < $_size360; ++$_i364)
              {
                $elem365 = null;
                $xfer += $input->readString($elem365);
                if (is_scalar($elem365)) {
                  $val359[$elem365] = true;
                } else {
                  $val359 []= $elem365;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key358] = $val359;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter366 => $viter367)
          {
            $xfer += $output->writeI64($kiter366);
            {
              $output->writeSetBegin(TType::STRING, count($viter367));
              {
                foreach ($viter367 as $iter368 => $iter369)
                {
                  if (is_scalar($iter369)) {
                  $xfer += $output->writeString($iter368);
                  } else {
                  $xfer += $output->writeString($iter369);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size370 = 0;
            $_etype373 = 0;
            $xfer += $input->readSetBegin($_etype373, $_size370);
            for ($_i374 = 0; $_i374 < $_size370; ++$_i374)
            {
              $elem375 = null;
              $elem375 = new \thrift\data\TObject();
              $xfer += $elem375->read($input);
              if (is_scalar($elem375)) {
                $this->success[$elem375] = true;
              } else {
                $this->success []= $elem375;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter376 => $iter377)
          {
            if (is_scalar($iter377)) {
            $xfer += $iter376->write($output);
            } else {
            $xfer += $iter377->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size378 = 0;
            $_etype381 = 0;
            $xfer += $input->readSetBegin($_etype381, $_size378);
            for ($_i382 = 0; $_i382 < $_size378; ++$_i382)
            {
              $elem383 = null;
              $elem383 = new \thrift\data\TObject();
              $xfer += $elem383->read($input);
              if (is_scalar($elem383)) {
                $this->success[$elem383] = true;
              } else {
                $this->success []= $elem383;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter384 => $iter385)
          {
            if (is_scalar($iter385)) {
            $xfer += $iter384->write($output);
            } else {
            $xfer += $iter385->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size386 = 0;
            $_etype389 = 0;
            $xfer += $input->readListBegin($_etype389, $_size386);
            for ($_i390 = 0; $_i390 < $_size386; ++$_i390)
            {
              $elem391 = null;
              $xfer += $input->readString($elem391);
              $this->keys []= $elem391;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter392)
          {
            $xfer += $output->writeString($iter392);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size393 = 0;
            $_ktype394 = 0;
            $_vtype395 = 0;
            $xfer += $input->readMapBegin($_ktype394, $_vtype395, $_size393);
            for ($_i397 = 0; $_i397 < $_size393; ++$_i397)
            {
              $key398 = '';
              $val399 = array();
              $xfer += $input->readString($key398);
              $val399 = array();
              $_size400 = 0;
              $_etype403 = 0;
              $xfer += $input->readSetBegin($_etype403, $_size400);
              for ($_i404 = 0; $_i404 < $_size400; ++$_i404)
              {
                $elem405 = null;
                $elem405 = new \thrift\data\TObject();
                $xfer += $elem405->read($input);
                if (is_scalar($elem405)) {
                  $val399[$elem405] = true;
                } else {
                  $val399 []= $elem405;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key398] = $val399;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter406 => $viter407)
          {
            $xfer += $output->writeString($kiter406);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter407));
              {
                foreach ($viter407 as $iter408 => $iter409)
                {
                  if (is_scalar($iter409)) {
                  $xfer += $iter408->write($output);
                  } else {
                  $xfer += $iter409->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size410 = 0;
            $_etype413 = 0;
            $xfer += $input->readListBegin($_etype413, $_size410);
            for ($_i414 = 0; $_i414 < $_size410; ++$_i414)
            {
              $elem415 = null;
              $xfer += $input->readString($elem415);
              $this->keys []= $elem415;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter416)
          {
            $xfer += $output->writeString($iter416);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size417 = 0;
            $_ktype418 = 0;
            $_vtype419 = 0;
            $xfer += $input->readMapBegin($_ktype418, $_vtype419, $_size417);
            for ($_i421 = 0; $_i421 < $_size417; ++$_i421)
            {
              $key422 = '';
              $val423 = array();
              $xfer += $input->readString($key422);
              $val423 = array();
              $_size424 = 0;
              $_etype427 = 0;
              $xfer += $input->readSetBegin($_etype427, $_size424);
              for ($_i428 = 0; $_i428 < $_size424; ++$_i428)
              {
                $elem429 = null;
                $elem429 = new \thrift\data\TObject();
                $xfer += $elem429->read($input);
                if (is_scalar($elem429)) {
                  $val423[$elem429] = true;
                } else {
                  $val423 []= $elem429;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key422] = $val423;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter430 => $viter431)
          {
            $xfer += $output->writeString($kiter430);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter431));
              {
                foreach ($viter431 as $iter432 => $iter433)
                {
                  if (is_scalar($iter433)) {
                  $xfer += $iter432->write($output);
                  } else {
                  $xfer += $iter433->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size434 = 0;
            $_etype437 = 0;
            $xfer += $input->readListBegin($_etype437, $_size434);
            for ($_i438 = 0; $_i438 < $_size434; ++$_i438)
            {
              $elem439 = null;
              $xfer += $input->readString($elem439);
              $this->keys []= $elem439;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size440 = 0;
            $_etype443 = 0;
            $xfer += $input->readListBegin($_etype443, $_size440);
            for ($_i444 = 0; $_i444 < $_size440; ++$_i444)
            {
              $elem445 = null;
              $xfer += $input->readI64($elem445);
              $this->records []= $elem445;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter446)
          {
            $xfer += $output->writeString($iter446);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter447)
          {
            $xfer += $output->writeI64($iter447);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size448 = 0;
            $_ktype449 = 0;
            $_vtype450 = 0;
            $xfer += $input->readMapBegin($_ktype449, $_vtype450, $_size448);
            for ($_i452 = 0; $_i452 < $_size448; ++$_i452)
            {
              $key453 = 0;
              $val454 = array();
              $xfer += $input->readI64($key453);
              $val454 = array();
              $_size455 = 0;
              $_ktype456 = 0;
              $_vtype457 = 0;
              $xfer += $input->readMapBegin($_ktype456, $_vtype457, $_size455);
              for ($_i459 = 0; $_i459 < $_size455; ++$_i459)
              {
                $key460 = '';
                $val461 = array();
                $xfer += $input->readString($key460);
                $val461 = array();
                $_size462 = 0;
                $_etype465 = 0;
                $xfer += $input->readSetBegin($_etype465, $_size462);
                for ($_i466 = 0; $_i466 < $_size462; ++$_i466)
                {
                  $elem467 = null;
                  $elem467 = new \thrift\data\TObject();
                  $xfer += $elem467->read($input);
                  if (is_scalar($elem467)) {
                    $val461[$elem467] = true;
                  } else {
                    $val461 []= $elem467;
                  }
                }
                $xfer += $input->readSetEnd();
                $val454[$key460] = $val461;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key453] = $val454;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter468 => $viter469)
          {
            $xfer += $output->writeI64($kiter468);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter469));
              {
                foreach ($viter469 as $kiter470 => $viter471)
                {
                  $xfer += $output->writeString($kiter470);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter471));
                    {
                      foreach ($viter471 as $iter472 => $iter473)
                      {
                        if (is_scalar($iter473)) {
                        $xfer += $iter472->write($output);
                        } else {
                        $xfer += $iter473->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size474 = 0;
            $_etype477 = 0;
            $xfer += $input->readListBegin($_etype477, $_size474);
            for ($_i478 = 0; $_i478 < $_size474; ++$_i478)
            {
              $elem479 = null;
              $xfer += $input->readI64($elem479);
              $this->records []= $elem479;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter480)
          {
            $xfer += $output->writeI64($iter480);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size481 = 0;
            $_ktype482 = 0;
            $_vtype483 = 0;
            $xfer += $input->readMapBegin($_ktype482, $_vtype483, $_size481);
            for ($_i485 = 0; $_i485 < $_size481; ++$_i485)
            {
              $key486 = 0;
              $val487 = array();
              $xfer += $input->readI64($key486);
              $val487 = array();
              $_size488 = 0;
              $_etype491 = 0;
              $xfer += $input->readSetBegin($_etype491, $_size488);
              for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
              {
                $elem493 = null;
                $elem493 = new \thrift\data\TObject();
                $xfer += $elem493->read($input);
                if (is_scalar($elem493)) {
                  $val487[$elem493] = true;
                } else {
                  $val487 []= $elem493;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key486] = $val487;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter494 => $viter495)
          {
            $xfer += $output->writeI64($kiter494);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter495));
              {
                foreach ($viter495 as $iter496 => $iter497)
                {
                  if (is_scalar($iter497)) {
                  $xfer += $iter496->write($output);
                  } else {
                  $xfer += $iter497->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size498 = 0;
            $_etype501 = 0;
            $xfer += $input->readListBegin($_etype501, $_size498);
            for ($_i502 = 0; $_i502 < $_size498; ++$_i502)
            {
              $elem503 = null;
              $xfer += $input->readI64($elem503);
              $this->records []= $elem503;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter504)
          {
            $xfer += $output->writeI64($iter504);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size505 = 0;
            $_ktype506 = 0;
            $_vtype507 = 0;
            $xfer += $input->readMapBegin($_ktype506, $_vtype507, $_size505);
            for ($_i509 = 0; $_i509 < $_size505; ++$_i509)
            {
              $key510 = 0;
              $val511 = array();
              $xfer += $input->readI64($key510);
              $val511 = array();
              $_size512 = 0;
              $_etype515 = 0;
              $xfer += $input->readSetBegin($_etype515, $_size512);
              for ($_i516 = 0; $_i516 < $_size512; ++$_i516)
              {
                $elem517 = null;
                $elem517 = new \thrift\data\TObject();
                $xfer += $elem517->read($input);
                if (is_scalar($elem517)) {
                  $val511[$elem517] = true;
                } else {
                  $val511 []= $elem517;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key510] = $val511;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter518 => $viter519)
          {
            $xfer += $output->writeI64($kiter518);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter519));
              {
                foreach ($viter519 as $iter520 => $iter521)
                {
                  if (is_scalar($iter521)) {
                  $xfer += $iter520->write($output);
                  } else {
                  $xfer += $iter521->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size522 = 0;
            $_etype525 = 0;
            $xfer += $input->readListBegin($_etype525, $_size522);
            for ($_i526 = 0; $_i526 < $_size522; ++$_i526)
            {
              $elem527 = null;
              $xfer += $input->readString($elem527);
              $this->keys []= $elem527;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size528 = 0;
            $_etype531 = 0;
            $xfer += $input->readListBegin($_etype531, $_size528);
            for ($_i532 = 0; $_i532 < $_size528; ++$_i532)
            {
              $elem533 = null;
              $xfer += $input->readI64($elem533);
              $this->records []= $elem533;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter534)
          {
            $xfer += $output->writeString($iter534);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter535)
          {
            $xfer += $output->writeI64($iter535);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size536 = 0;
            $_ktype537 = 0;
            $_vtype538 = 0;
            $xfer += $input->readMapBegin($_ktype537, $_vtype538, $_size536);
            for ($_i540 = 0; $_i540 < $_size536; ++$_i540)
            {
              $key541 = 0;
              $val542 = array();
              $xfer += $input->readI64($key541);
              $val542 = array();
              $_size543 = 0;
              $_ktype544 = 0;
              $_vtype545 = 0;
              $xfer += $input->readMapBegin($_ktype544, $_vtype545, $_size543);
              for ($_i547 = 0; $_i547 < $_size543; ++$_i547)
              {
                $key548 = '';
                $val549 = array();
                $xfer += $input->readString($key548);
                $val549 = array();
                $_size550 = 0;
                $_etype553 = 0;
                $xfer += $input->readSetBegin($_etype553, $_size550);
                for ($_i554 = 0; $_i554 < $_size550; ++$_i554)
                {
                  $elem555 = null;
                  $elem555 = new \thrift\data\TObject();
                  $xfer += $elem555->read($input);
                  if (is_scalar($elem555)) {
                    $val549[$elem555] = true;
                  } else {
                    $val549 []= $elem555;
                  }
                }
                $xfer += $input->readSetEnd();
                $val542[$key548] = $val549;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key541] = $val542;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter556 => $viter557)
          {
            $xfer += $output->writeI64($kiter556);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter557));
              {
                foreach ($viter557 as $kiter558 => $viter559)
                {
                  $xfer += $output->writeString($kiter558);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter559));
                    {
                      foreach ($viter559 as $iter560 => $iter561)
                      {
                        if (is_scalar($iter561)) {
                        $xfer += $iter560->write($output);
                        } else {
                        $xfer += $iter561->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size562 = 0;
            $_ktype563 = 0;
            $_vtype564 = 0;
            $xfer += $input->readMapBegin($_ktype563, $_vtype564, $_size562);
            for ($_i566 = 0; $_i566 < $_size562; ++$_i566)
            {
              $key567 = 0;
              $val568 = array();
              $xfer += $input->readI64($key567);
              $val568 = array();
              $_size569 = 0;
              $_ktype570 = 0;
              $_vtype571 = 0;
              $xfer += $input->readMapBegin($_ktype570, $_vtype571, $_size569);
              for ($_i573 = 0; $_i573 < $_size569; ++$_i573)
              {
                $key574 = '';
                $val575 = array();
                $xfer += $input->readString($key574);
                $val575 = array();
                $_size576 = 0;
                $_etype579 = 0;
                $xfer += $input->readSetBegin($_etype579, $_size576);
                for ($_i580 = 0; $_i580 < $_size576; ++$_i580)
                {
                  $elem581 = null;
                  $elem581 = new \thrift\data\TObject();
                  $xfer += $elem581->read($input);
                  if (is_scalar($elem581)) {
                    $val575[$elem581] = true;
                  } else {
                    $val575 []= $elem581;
                  }
                }
                $xfer += $input->readSetEnd();
                $val568[$key574] = $val575;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key567] = $val568;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter582 => $viter583)
          {
            $xfer += $output->writeI64($kiter582);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter583));
              {
                foreach ($viter583 as $kiter584 => $viter585)
                {
                  $xfer += $output->writeString($kiter584);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter585));
                    {
                      foreach ($viter585 as $iter586 => $iter587)
                      {
                        if (is_scalar($iter587)) {
                        $xfer += $iter586->write($output);
                        } else {
                        $xfer += $iter587->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size588 = 0;
            $_ktype589 = 0;
            $_vtype590 = 0;
            $xfer += $input->readMapBegin($_ktype589, $_vtype590, $_size588);
            for ($_i592 = 0; $_i592 < $_size588; ++$_i592)
            {
              $key593 = 0;
              $val594 = array();
              $xfer += $input->readI64($key593);
              $val594 = array();
              $_size595 = 0;
              $_ktype596 = 0;
              $_vtype597 = 0;
              $xfer += $input->readMapBegin($_ktype596, $_vtype597, $_size595);
              for ($_i599 = 0; $_i599 < $_size595; ++$_i599)
              {
                $key600 = '';
                $val601 = array();
                $xfer += $input->readString($key600);
                $val601 = array();
                $_size602 = 0;
                $_etype605 = 0;
                $xfer += $input->readSetBegin($_etype605, $_size602);
                for ($_i606 = 0; $_i606 < $_size602; ++$_i606)
                {
                  $elem607 = null;
                  $elem607 = new \thrift\data\TObject();
                  $xfer += $elem607->read($input);
                  if (is_scalar($elem607)) {
                    $val601[$elem607] = true;
                  } else {
                    $val601 []= $elem607;
                  }
                }
                $xfer += $input->readSetEnd();
                $val594[$key600] = $val601;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key593] = $val594;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter608 => $viter609)
          {
            $xfer += $output->writeI64($kiter608);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter609));
              {
                foreach ($viter609 as $kiter610 => $viter611)
                {
                  $xfer += $output->writeString($kiter610);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter611));
                    {
                      foreach ($viter611 as $iter612 => $iter613)
                      {
                        if (is_scalar($iter613)) {
                        $xfer += $iter612->write($output);
                        } else {
                        $xfer += $iter613->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size614 = 0;
            $_ktype615 = 0;
            $_vtype616 = 0;
            $xfer += $input->readMapBegin($_ktype615, $_vtype616, $_size614);
            for ($_i618 = 0; $_i618 < $_size614; ++$_i618)
            {
              $key619 = 0;
              $val620 = array();
              $xfer += $input->readI64($key619);
              $val620 = array();
              $_size621 = 0;
              $_ktype622 = 0;
              $_vtype623 = 0;
              $xfer += $input->readMapBegin($_ktype622, $_vtype623, $_size621);
              for ($_i625 = 0; $_i625 < $_size621; ++$_i625)
              {
                $key626 = '';
                $val627 = array();
                $xfer += $input->readString($key626);
                $val627 = array();
                $_size628 = 0;
                $_etype631 = 0;
                $xfer += $input->readSetBegin($_etype631, $_size628);
                for ($_i632 = 0; $_i632 < $_size628; ++$_i632)
                {
                  $elem633 = null;
                  $elem633 = new \thrift\data\TObject();
                  $xfer += $elem633->read($input);
                  if (is_scalar($elem633)) {
                    $val627[$elem633] = true;
                  } else {
                    $val627 []= $elem633;
                  }
                }
                $xfer += $input->readSetEnd();
                $val620[$key626] = $val627;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key619] = $val620;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter634 => $viter635)
          {
            $xfer += $output->writeI64($kiter634);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter635));
              {
                foreach ($viter635 as $kiter636 => $viter637)
                {
                  $xfer += $output->writeString($kiter636);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter637));
                    {
                      foreach ($viter637 as $iter638 => $iter639)
                      {
                        if (is_scalar($iter639)) {
                        $xfer += $iter638->write($output);
                        } else {
                        $xfer += $iter639->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size640 = 0;
            $_ktype641 = 0;
            $_vtype642 = 0;
            $xfer += $input->readMapBegin($_ktype641, $_vtype642, $_size640);
            for ($_i644 = 0; $_i644 < $_size640; ++$_i644)
            {
              $key645 = 0;
              $val646 = array();
              $xfer += $input->readI64($key645);
              $val646 = array();
              $_size647 = 0;
              $_ktype648 = 0;
              $_vtype649 = 0;
              $xfer += $input->readMapBegin($_ktype648, $_vtype649, $_size647);
              for ($_i651 = 0; $_i651 < $_size647; ++$_i651)
              {
                $key652 = '';
                $val653 = array();
                $xfer += $input->readString($key652);
                $val653 = array();
                $_size654 = 0;
                $_etype657 = 0;
                $xfer += $input->readSetBegin($_etype657, $_size654);
                for ($_i658 = 0; $_i658 < $_size654; ++$_i658)
                {
                  $elem659 = null;
                  $elem659 = new \thrift\data\TObject();
                  $xfer += $elem659->read($input);
                  if (is_scalar($elem659)) {
                    $val653[$elem659] = true;
                  } else {
                    $val653 []= $elem659;
                  }
                }
                $xfer += $input->readSetEnd();
                $val646[$key652] = $val653;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key645] = $val646;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter660 => $viter661)
          {
            $xfer += $output->writeI64($kiter660);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter661));
              {
                foreach ($viter661 as $kiter662 => $viter663)
                {
                  $xfer += $output->writeString($kiter662);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter663));
                    {
                      foreach ($viter663 as $iter664 => $iter665)
                      {
                        if (is_scalar($iter665)) {
                        $xfer += $iter664->write($output);
                        } else {
                        $xfer += $iter665->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size666 = 0;
            $_ktype667 = 0;
            $_vtype668 = 0;
            $xfer += $input->readMapBegin($_ktype667, $_vtype668, $_size666);
            for ($_i670 = 0; $_i670 < $_size666; ++$_i670)
            {
              $key671 = 0;
              $val672 = array();
              $xfer += $input->readI64($key671);
              $val672 = array();
              $_size673 = 0;
              $_etype676 = 0;
              $xfer += $input->readSetBegin($_etype676, $_size673);
              for ($_i677 = 0; $_i677 < $_size673; ++$_i677)
              {
                $elem678 = null;
                $elem678 = new \thrift\data\TObject();
                $xfer += $elem678->read($input);
                if (is_scalar($elem678)) {
                  $val672[$elem678] = true;
                } else {
                  $val672 []= $elem678;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key671] = $val672;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter679 => $viter680)
          {
            $xfer += $output->writeI64($kiter679);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter680));
              {
                foreach ($viter680 as $iter681 => $iter682)
                {
                  if (is_scalar($iter682)) {
                  $xfer += $iter681->write($output);
                  } else {
                  $xfer += $iter682->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size683 = 0;
            $_ktype684 = 0;
            $_vtype685 = 0;
            $xfer += $input->readMapBegin($_ktype684, $_vtype685, $_size683);
            for ($_i687 = 0; $_i687 < $_size683; ++$_i687)
            {
              $key688 = 0;
              $val689 = array();
              $xfer += $input->readI64($key688);
              $val689 = array();
              $_size690 = 0;
              $_etype693 = 0;
              $xfer += $input->readSetBegin($_etype693, $_size690);
              for ($_i694 = 0; $_i694 < $_size690; ++$_i694)
              {
                $elem695 = null;
                $elem695 = new \thrift\data\TObject();
                $xfer += $elem695->read($input);
                if (is_scalar($elem695)) {
                  $val689[$elem695] = true;
                } else {
                  $val689 []= $elem695;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key688] = $val689;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter696 => $viter697)
          {
            $xfer += $output->writeI64($kiter696);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter697));
              {
                foreach ($viter697 as $iter698 => $iter699)
                {
                  if (is_scalar($iter699)) {
                  $xfer += $iter698->write($output);
                  } else {
                  $xfer += $iter699->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size700 = 0;
            $_ktype701 = 0;
            $_vtype702 = 0;
            $xfer += $input->readMapBegin($_ktype701, $_vtype702, $_size700);
            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
            {
              $key705 = 0;
              $val706 = array();
              $xfer += $input->readI64($key705);
              $val706 = array();
              $_size707 = 0;
              $_etype710 = 0;
              $xfer += $input->readSetBegin($_etype710, $_size707);
              for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
              {
                $elem712 = null;
                $elem712 = new \thrift\data\TObject();
                $xfer += $elem712->read($input);
                if (is_scalar($elem712)) {
                  $val706[$elem712] = true;
                } else {
                  $val706 []= $elem712;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key705] = $val706;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter713 => $viter714)
          {
            $xfer += $output->writeI64($kiter713);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter714));
              {
                foreach ($viter714 as $iter715 => $iter716)
                {
                  if (is_scalar($iter716)) {
                  $xfer += $iter715->write($output);
                  } else {
                  $xfer += $iter716->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size717 = 0;
            $_ktype718 = 0;
            $_vtype719 = 0;
            $xfer += $input->readMapBegin($_ktype718, $_vtype719, $_size717);
            for ($_i721 = 0; $_i721 < $_size717; ++$_i721)
            {
              $key722 = 0;
              $val723 = array();
              $xfer += $input->readI64($key722);
              $val723 = array();
              $_size724 = 0;
              $_etype727 = 0;
              $xfer += $input->readSetBegin($_etype727, $_size724);
              for ($_i728 = 0; $_i728 < $_size724; ++$_i728)
              {
                $elem729 = null;
                $elem729 = new \thrift\data\TObject();
                $xfer += $elem729->read($input);
                if (is_scalar($elem729)) {
                  $val723[$elem729] = true;
                } else {
                  $val723 []= $elem729;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key722] = $val723;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter730 => $viter731)
          {
            $xfer += $output->writeI64($kiter730);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter731));
              {
                foreach ($viter731 as $iter732 => $iter733)
                {
                  if (is_scalar($iter733)) {
                  $xfer += $iter732->write($output);
                  } else {
                  $xfer += $iter733->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size734 = 0;
            $_etype737 = 0;
            $xfer += $input->readListBegin($_etype737, $_size734);
            for ($_i738 = 0; $_i738 < $_size734; ++$_i738)
            {
              $elem739 = null;
              $xfer += $input->readString($elem739);
              $this->keys []= $elem739;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter740)
          {
            $xfer += $output->writeString($iter740);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size741 = 0;
            $_ktype742 = 0;
            $_vtype743 = 0;
            $xfer += $input->readMapBegin($_ktype742, $_vtype743, $_size741);
            for ($_i745 = 0; $_i745 < $_size741; ++$_i745)
            {
              $key746 = 0;
              $val747 = array();
              $xfer += $input->readI64($key746);
              $val747 = array();
              $_size748 = 0;
              $_ktype749 = 0;
              $_vtype750 = 0;
              $xfer += $input->readMapBegin($_ktype749, $_vtype750, $_size748);
              for ($_i752 = 0; $_i752 < $_size748; ++$_i752)
              {
                $key753 = '';
                $val754 = array();
                $xfer += $input->readString($key753);
                $val754 = array();
                $_size755 = 0;
                $_etype758 = 0;
                $xfer += $input->readSetBegin($_etype758, $_size755);
                for ($_i759 = 0; $_i759 < $_size755; ++$_i759)
                {
                  $elem760 = null;
                  $elem760 = new \thrift\data\TObject();
                  $xfer += $elem760->read($input);
                  if (is_scalar($elem760)) {
                    $val754[$elem760] = true;
                  } else {
                    $val754 []= $elem760;
                  }
                }
                $xfer += $input->readSetEnd();
                $val747[$key753] = $val754;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key746] = $val747;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter761 => $viter762)
          {
            $xfer += $output->writeI64($kiter761);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter762));
              {
                foreach ($viter762 as $kiter763 => $viter764)
                {
                  $xfer += $output->writeString($kiter763);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter764));
                    {
                      foreach ($viter764 as $iter765 => $iter766)
                      {
                        if (is_scalar($iter766)) {
                        $xfer += $iter765->write($output);
                        } else {
                        $xfer += $iter766->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size767 = 0;
            $_etype770 = 0;
            $xfer += $input->readListBegin($_etype770, $_size767);
            for ($_i771 = 0; $_i771 < $_size767; ++$_i771)
            {
              $elem772 = null;
              $xfer += $input->readString($elem772);
              $this->keys []= $elem772;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter773)
          {
            $xfer += $output->writeString($iter773);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size774 = 0;
            $_ktype775 = 0;
            $_vtype776 = 0;
            $xfer += $input->readMapBegin($_ktype775, $_vtype776, $_size774);
            for ($_i778 = 0; $_i778 < $_size774; ++$_i778)
            {
              $key779 = 0;
              $val780 = array();
              $xfer += $input->readI64($key779);
              $val780 = array();
              $_size781 = 0;
              $_ktype782 = 0;
              $_vtype783 = 0;
              $xfer += $input->readMapBegin($_ktype782, $_vtype783, $_size781);
              for ($_i785 = 0; $_i785 < $_size781; ++$_i785)
              {
                $key786 = '';
                $val787 = array();
                $xfer += $input->readString($key786);
                $val787 = array();
                $_size788 = 0;
                $_etype791 = 0;
                $xfer += $input->readSetBegin($_etype791, $_size788);
                for ($_i792 = 0; $_i792 < $_size788; ++$_i792)
                {
                  $elem793 = null;
                  $elem793 = new \thrift\data\TObject();
                  $xfer += $elem793->read($input);
                  if (is_scalar($elem793)) {
                    $val787[$elem793] = true;
                  } else {
                    $val787 []= $elem793;
                  }
                }
                $xfer += $input->readSetEnd();
                $val780[$key786] = $val787;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key779] = $val780;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter794 => $viter795)
          {
            $xfer += $output->writeI64($kiter794);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter795));
              {
                foreach ($viter795 as $kiter796 => $viter797)
                {
                  $xfer += $output->writeString($kiter796);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter797));
                    {
                      foreach ($viter797 as $iter798 => $iter799)
                      {
                        if (is_scalar($iter799)) {
                        $xfer += $iter798->write($output);
                        } else {
                        $xfer += $iter799->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size800 = 0;
            $_etype803 = 0;
            $xfer += $input->readListBegin($_etype803, $_size800);
            for ($_i804 = 0; $_i804 < $_size800; ++$_i804)
            {
              $elem805 = null;
              $xfer += $input->readString($elem805);
              $this->keys []= $elem805;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter806)
          {
            $xfer += $output->writeString($iter806);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size807 = 0;
            $_ktype808 = 0;
            $_vtype809 = 0;
            $xfer += $input->readMapBegin($_ktype808, $_vtype809, $_size807);
            for ($_i811 = 0; $_i811 < $_size807; ++$_i811)
            {
              $key812 = 0;
              $val813 = array();
              $xfer += $input->readI64($key812);
              $val813 = array();
              $_size814 = 0;
              $_ktype815 = 0;
              $_vtype816 = 0;
              $xfer += $input->readMapBegin($_ktype815, $_vtype816, $_size814);
              for ($_i818 = 0; $_i818 < $_size814; ++$_i818)
              {
                $key819 = '';
                $val820 = array();
                $xfer += $input->readString($key819);
                $val820 = array();
                $_size821 = 0;
                $_etype824 = 0;
                $xfer += $input->readSetBegin($_etype824, $_size821);
                for ($_i825 = 0; $_i825 < $_size821; ++$_i825)
                {
                  $elem826 = null;
                  $elem826 = new \thrift\data\TObject();
                  $xfer += $elem826->read($input);
                  if (is_scalar($elem826)) {
                    $val820[$elem826] = true;
                  } else {
                    $val820 []= $elem826;
                  }
                }
                $xfer += $input->readSetEnd();
                $val813[$key819] = $val820;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key812] = $val813;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter827 => $viter828)
          {
            $xfer += $output->writeI64($kiter827);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter828));
              {
                foreach ($viter828 as $kiter829 => $viter830)
                {
                  $xfer += $output->writeString($kiter829);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter830));
                    {
                      foreach ($viter830 as $iter831 => $iter832)
                      {
                        if (is_scalar($iter832)) {
                        $xfer += $iter831->write($output);
                        } else {
                        $xfer += $iter832->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size833 = 0;
            $_etype836 = 0;
            $xfer += $input->readListBegin($_etype836, $_size833);
            for ($_i837 = 0; $_i837 < $_size833; ++$_i837)
            {
              $elem838 = null;
              $xfer += $input->readString($elem838);
              $this->keys []= $elem838;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter839)
          {
            $xfer += $output->writeString($iter839);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size840 = 0;
            $_ktype841 = 0;
            $_vtype842 = 0;
            $xfer += $input->readMapBegin($_ktype841, $_vtype842, $_size840);
            for ($_i844 = 0; $_i844 < $_size840; ++$_i844)
            {
              $key845 = 0;
              $val846 = array();
              $xfer += $input->readI64($key845);
              $val846 = array();
              $_size847 = 0;
              $_ktype848 = 0;
              $_vtype849 = 0;
              $xfer += $input->readMapBegin($_ktype848, $_vtype849, $_size847);
              for ($_i851 = 0; $_i851 < $_size847; ++$_i851)
              {
                $key852 = '';
                $val853 = array();
                $xfer += $input->readString($key852);
                $val853 = array();
                $_size854 = 0;
                $_etype857 = 0;
                $xfer += $input->readSetBegin($_etype857, $_size854);
                for ($_i858 = 0; $_i858 < $_size854; ++$_i858)
                {
                  $elem859 = null;
                  $elem859 = new \thrift\data\TObject();
                  $xfer += $elem859->read($input);
                  if (is_scalar($elem859)) {
                    $val853[$elem859] = true;
                  } else {
                    $val853 []= $elem859;
                  }
                }
                $xfer += $input->readSetEnd();
                $val846[$key852] = $val853;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key845] = $val846;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter860 => $viter861)
          {
            $xfer += $output->writeI64($kiter860);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter861));
              {
                foreach ($viter861 as $kiter862 => $viter863)
                {
                  $xfer += $output->writeString($kiter862);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter863));
                    {
                      foreach ($viter863 as $iter864 => $iter865)
                      {
                        if (is_scalar($iter865)) {
                        $xfer += $iter864->write($output);
                        } else {
                        $xfer += $iter865->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size866 = 0;
            $_etype869 = 0;
            $xfer += $input->readListBegin($_etype869, $_size866);
            for ($_i870 = 0; $_i870 < $_size866; ++$_i870)
            {
              $elem871 = null;
              $xfer += $input->readString($elem871);
              $this->keys []= $elem871;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter872)
          {
            $xfer += $output->writeString($iter872);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size873 = 0;
            $_ktype874 = 0;
            $_vtype875 = 0;
            $xfer += $input->readMapBegin($_ktype874, $_vtype875, $_size873);
            for ($_i877 = 0; $_i877 < $_size873; ++$_i877)
            {
              $key878 = '';
              $val879 = new \thrift\data\TObject();
              $xfer += $input->readString($key878);
              $val879 = new \thrift\data\TObject();
              $xfer += $val879->read($input);
              $this->success[$key878] = $val879;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter880 => $viter881)
          {
            $xfer += $output->writeString($kiter880);
            $xfer += $viter881->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size882 = 0;
            $_etype885 = 0;
            $xfer += $input->readListBegin($_etype885, $_size882);
            for ($_i886 = 0; $_i886 < $_size882; ++$_i886)
            {
              $elem887 = null;
              $xfer += $input->readString($elem887);
              $this->keys []= $elem887;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter888)
          {
            $xfer += $output->writeString($iter888);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size889 = 0;
            $_ktype890 = 0;
            $_vtype891 = 0;
            $xfer += $input->readMapBegin($_ktype890, $_vtype891, $_size889);
            for ($_i893 = 0; $_i893 < $_size889; ++$_i893)
            {
              $key894 = '';
              $val895 = new \thrift\data\TObject();
              $xfer += $input->readString($key894);
              $val895 = new \thrift\data\TObject();
              $xfer += $val895->read($input);
              $this->success[$key894] = $val895;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter896 => $viter897)
          {
            $xfer += $output->writeString($kiter896);
            $xfer += $viter897->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size898 = 0;
            $_etype901 = 0;
            $xfer += $input->readListBegin($_etype901, $_size898);
            for ($_i902 = 0; $_i902 < $_size898; ++$_i902)
            {
              $elem903 = null;
              $xfer += $input->readString($elem903);
              $this->keys []= $elem903;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size904 = 0;
            $_etype907 = 0;
            $xfer += $input->readListBegin($_etype907, $_size904);
            for ($_i908 = 0; $_i908 < $_size904; ++$_i908)
            {
              $elem909 = null;
              $xfer += $input->readI64($elem909);
              $this->records []= $elem909;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter910)
          {
            $xfer += $output->writeString($iter910);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter911)
          {
            $xfer += $output->writeI64($iter911);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size912 = 0;
            $_ktype913 = 0;
            $_vtype914 = 0;
            $xfer += $input->readMapBegin($_ktype913, $_vtype914, $_size912);
            for ($_i916 = 0; $_i916 < $_size912; ++$_i916)
            {
              $key917 = 0;
              $val918 = array();
              $xfer += $input->readI64($key917);
              $val918 = array();
              $_size919 = 0;
              $_ktype920 = 0;
              $_vtype921 = 0;
              $xfer += $input->readMapBegin($_ktype920, $_vtype921, $_size919);
              for ($_i923 = 0; $_i923 < $_size919; ++$_i923)
              {
                $key924 = '';
                $val925 = new \thrift\data\TObject();
                $xfer += $input->readString($key924);
                $val925 = new \thrift\data\TObject();
                $xfer += $val925->read($input);
                $val918[$key924] = $val925;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key917] = $val918;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter926 => $viter927)
          {
            $xfer += $output->writeI64($kiter926);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter927));
              {
                foreach ($viter927 as $kiter928 => $viter929)
                {
                  $xfer += $output->writeString($kiter928);
                  $xfer += $viter929->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size930 = 0;
            $_etype933 = 0;
            $xfer += $input->readListBegin($_etype933, $_size930);
            for ($_i934 = 0; $_i934 < $_size930; ++$_i934)
            {
              $elem935 = null;
              $xfer += $input->readI64($elem935);
              $this->records []= $elem935;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter936)
          {
            $xfer += $output->writeI64($iter936);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size937 = 0;
            $_ktype938 = 0;
            $_vtype939 = 0;
            $xfer += $input->readMapBegin($_ktype938, $_vtype939, $_size937);
            for ($_i941 = 0; $_i941 < $_size937; ++$_i941)
            {
              $key942 = 0;
              $val943 = new \thrift\data\TObject();
              $xfer += $input->readI64($key942);
              $val943 = new \thrift\data\TObject();
              $xfer += $val943->read($input);
              $this->success[$key942] = $val943;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter944 => $viter945)
          {
            $xfer += $output->writeI64($kiter944);
            $xfer += $viter945->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size946 = 0;
            $_etype949 = 0;
            $xfer += $input->readListBegin($_etype949, $_size946);
            for ($_i950 = 0; $_i950 < $_size946; ++$_i950)
            {
              $elem951 = null;
              $xfer += $input->readI64($elem951);
              $this->records []= $elem951;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter952)
          {
            $xfer += $output->writeI64($iter952);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size953 = 0;
            $_ktype954 = 0;
            $_vtype955 = 0;
            $xfer += $input->readMapBegin($_ktype954, $_vtype955, $_size953);
            for ($_i957 = 0; $_i957 < $_size953; ++$_i957)
            {
              $key958 = 0;
              $val959 = new \thrift\data\TObject();
              $xfer += $input->readI64($key958);
              $val959 = new \thrift\data\TObject();
              $xfer += $val959->read($input);
              $this->success[$key958] = $val959;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter960 => $viter961)
          {
            $xfer += $output->writeI64($kiter960);
            $xfer += $viter961->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size962 = 0;
            $_etype965 = 0;
            $xfer += $input->readListBegin($_etype965, $_size962);
            for ($_i966 = 0; $_i966 < $_size962; ++$_i966)
            {
              $elem967 = null;
              $xfer += $input->readString($elem967);
              $this->keys []= $elem967;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size968 = 0;
            $_etype971 = 0;
            $xfer += $input->readListBegin($_etype971, $_size968);
            for ($_i972 = 0; $_i972 < $_size968; ++$_i972)
            {
              $elem973 = null;
              $xfer += $input->readI64($elem973);
              $this->records []= $elem973;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter974)
          {
            $xfer += $output->writeString($iter974);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter975)
          {
            $xfer += $output->writeI64($iter975);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size976 = 0;
            $_ktype977 = 0;
            $_vtype978 = 0;
            $xfer += $input->readMapBegin($_ktype977, $_vtype978, $_size976);
            for ($_i980 = 0; $_i980 < $_size976; ++$_i980)
            {
              $key981 = 0;
              $val982 = array();
              $xfer += $input->readI64($key981);
              $val982 = array();
              $_size983 = 0;
              $_ktype984 = 0;
              $_vtype985 = 0;
              $xfer += $input->readMapBegin($_ktype984, $_vtype985, $_size983);
              for ($_i987 = 0; $_i987 < $_size983; ++$_i987)
              {
                $key988 = '';
                $val989 = new \thrift\data\TObject();
                $xfer += $input->readString($key988);
                $val989 = new \thrift\data\TObject();
                $xfer += $val989->read($input);
                $val982[$key988] = $val989;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key981] = $val982;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter990 => $viter991)
          {
            $xfer += $output->writeI64($kiter990);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter991));
              {
                foreach ($viter991 as $kiter992 => $viter993)
                {
                  $xfer += $output->writeString($kiter992);
                  $xfer += $viter993->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size994 = 0;
            $_ktype995 = 0;
            $_vtype996 = 0;
            $xfer += $input->readMapBegin($_ktype995, $_vtype996, $_size994);
            for ($_i998 = 0; $_i998 < $_size994; ++$_i998)
            {
              $key999 = 0;
              $val1000 = new \thrift\data\TObject();
              $xfer += $input->readI64($key999);
              $val1000 = new \thrift\data\TObject();
              $xfer += $val1000->read($input);
              $this->success[$key999] = $val1000;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1001 => $viter1002)
          {
            $xfer += $output->writeI64($kiter1001);
            $xfer += $viter1002->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1003 = 0;
            $_ktype1004 = 0;
            $_vtype1005 = 0;
            $xfer += $input->readMapBegin($_ktype1004, $_vtype1005, $_size1003);
            for ($_i1007 = 0; $_i1007 < $_size1003; ++$_i1007)
            {
              $key1008 = 0;
              $val1009 = array();
              $xfer += $input->readI64($key1008);
              $val1009 = array();
              $_size1010 = 0;
              $_ktype1011 = 0;
              $_vtype1012 = 0;
              $xfer += $input->readMapBegin($_ktype1011, $_vtype1012, $_size1010);
              for ($_i1014 = 0; $_i1014 < $_size1010; ++$_i1014)
              {
                $key1015 = '';
                $val1016 = new \thrift\data\TObject();
                $xfer += $input->readString($key1015);
                $val1016 = new \thrift\data\TObject();
                $xfer += $val1016->read($input);
                $val1009[$key1015] = $val1016;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1008] = $val1009;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1017 => $viter1018)
          {
            $xfer += $output->writeI64($kiter1017);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1018));
              {
                foreach ($viter1018 as $kiter1019 => $viter1020)
                {
                  $xfer += $output->writeString($kiter1019);
                  $xfer += $viter1020->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1021 = 0;
            $_ktype1022 = 0;
            $_vtype1023 = 0;
            $xfer += $input->readMapBegin($_ktype1022, $_vtype1023, $_size1021);
            for ($_i1025 = 0; $_i1025 < $_size1021; ++$_i1025)
            {
              $key1026 = 0;
              $val1027 = array();
              $xfer += $input->readI64($key1026);
              $val1027 = array();
              $_size1028 = 0;
              $_ktype1029 = 0;
              $_vtype1030 = 0;
              $xfer += $input->readMapBegin($_ktype1029, $_vtype1030, $_size1028);
              for ($_i1032 = 0; $_i1032 < $_size1028; ++$_i1032)
              {
                $key1033 = '';
                $val1034 = new \thrift\data\TObject();
                $xfer += $input->readString($key1033);
                $val1034 = new \thrift\data\TObject();
                $xfer += $val1034->read($input);
                $val1027[$key1033] = $val1034;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1026] = $val1027;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1035 => $viter1036)
          {
            $xfer += $output->writeI64($kiter1035);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1036));
              {
                foreach ($viter1036 as $kiter1037 => $viter1038)
                {
                  $xfer += $output->writeString($kiter1037);
                  $xfer += $viter1038->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1039 = 0;
            $_ktype1040 = 0;
            $_vtype1041 = 0;
            $xfer += $input->readMapBegin($_ktype1040, $_vtype1041, $_size1039);
            for ($_i1043 = 0; $_i1043 < $_size1039; ++$_i1043)
            {
              $key1044 = 0;
              $val1045 = array();
              $xfer += $input->readI64($key1044);
              $val1045 = array();
              $_size1046 = 0;
              $_ktype1047 = 0;
              $_vtype1048 = 0;
              $xfer += $input->readMapBegin($_ktype1047, $_vtype1048, $_size1046);
              for ($_i1050 = 0; $_i1050 < $_size1046; ++$_i1050)
              {
                $key1051 = '';
                $val1052 = new \thrift\data\TObject();
                $xfer += $input->readString($key1051);
                $val1052 = new \thrift\data\TObject();
                $xfer += $val1052->read($input);
                $val1045[$key1051] = $val1052;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1044] = $val1045;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1053 => $viter1054)
          {
            $xfer += $output->writeI64($kiter1053);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1054));
              {
                foreach ($viter1054 as $kiter1055 => $viter1056)
                {
                  $xfer += $output->writeString($kiter1055);
                  $xfer += $viter1056->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1057 = 0;
            $_ktype1058 = 0;
            $_vtype1059 = 0;
            $xfer += $input->readMapBegin($_ktype1058, $_vtype1059, $_size1057);
            for ($_i1061 = 0; $_i1061 < $_size1057; ++$_i1061)
            {
              $key1062 = 0;
              $val1063 = array();
              $xfer += $input->readI64($key1062);
              $val1063 = array();
              $_size1064 = 0;
              $_ktype1065 = 0;
              $_vtype1066 = 0;
              $xfer += $input->readMapBegin($_ktype1065, $_vtype1066, $_size1064);
              for ($_i1068 = 0; $_i1068 < $_size1064; ++$_i1068)
              {
                $key1069 = '';
                $val1070 = new \thrift\data\TObject();
                $xfer += $input->readString($key1069);
                $val1070 = new \thrift\data\TObject();
                $xfer += $val1070->read($input);
                $val1063[$key1069] = $val1070;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1062] = $val1063;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1071 => $viter1072)
          {
            $xfer += $output->writeI64($kiter1071);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1072));
              {
                foreach ($viter1072 as $kiter1073 => $viter1074)
                {
                  $xfer += $output->writeString($kiter1073);
                  $xfer += $viter1074->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1075 = 0;
            $_ktype1076 = 0;
            $_vtype1077 = 0;
            $xfer += $input->readMapBegin($_ktype1076, $_vtype1077, $_size1075);
            for ($_i1079 = 0; $_i1079 < $_size1075; ++$_i1079)
            {
              $key1080 = 0;
              $val1081 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1080);
              $val1081 = new \thrift\data\TObject();
              $xfer += $val1081->read($input);
              $this->success[$key1080] = $val1081;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1082 => $viter1083)
          {
            $xfer += $output->writeI64($kiter1082);
            $xfer += $viter1083->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1084 = 0;
            $_ktype1085 = 0;
            $_vtype1086 = 0;
            $xfer += $input->readMapBegin($_ktype1085, $_vtype1086, $_size1084);
            for ($_i1088 = 0; $_i1088 < $_size1084; ++$_i1088)
            {
              $key1089 = 0;
              $val1090 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1089);
              $val1090 = new \thrift\data\TObject();
              $xfer += $val1090->read($input);
              $this->success[$key1089] = $val1090;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1091 => $viter1092)
          {
            $xfer += $output->writeI64($kiter1091);
            $xfer += $viter1092->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1093 = 0;
            $_ktype1094 = 0;
            $_vtype1095 = 0;
            $xfer += $input->readMapBegin($_ktype1094, $_vtype1095, $_size1093);
            for ($_i1097 = 0; $_i1097 < $_size1093; ++$_i1097)
            {
              $key1098 = 0;
              $val1099 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1098);
              $val1099 = new \thrift\data\TObject();
              $xfer += $val1099->read($input);
              $this->success[$key1098] = $val1099;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1100 => $viter1101)
          {
            $xfer += $output->writeI64($kiter1100);
            $xfer += $viter1101->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1102 = 0;
            $_etype1105 = 0;
            $xfer += $input->readListBegin($_etype1105, $_size1102);
            for ($_i1106 = 0; $_i1106 < $_size1102; ++$_i1106)
            {
              $elem1107 = null;
              $xfer += $input->readString($elem1107);
              $this->keys []= $elem1107;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1108)
          {
            $xfer += $output->writeString($iter1108);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1109 = 0;
            $_ktype1110 = 0;
            $_vtype1111 = 0;
            $xfer += $input->readMapBegin($_ktype1110, $_vtype1111, $_size1109);
            for ($_i1113 = 0; $_i1113 < $_size1109; ++$_i1113)
            {
              $key1114 = 0;
              $val1115 = array();
              $xfer += $input->readI64($key1114);
              $val1115 = array();
              $_size1116 = 0;
              $_ktype1117 = 0;
              $_vtype1118 = 0;
              $xfer += $input->readMapBegin($_ktype1117, $_vtype1118, $_size1116);
              for ($_i1120 = 0; $_i1120 < $_size1116; ++$_i1120)
              {
                $key1121 = '';
                $val1122 = new \thrift\data\TObject();
                $xfer += $input->readString($key1121);
                $val1122 = new \thrift\data\TObject();
                $xfer += $val1122->read($input);
                $val1115[$key1121] = $val1122;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1114] = $val1115;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1123 => $viter1124)
          {
            $xfer += $output->writeI64($kiter1123);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1124));
              {
                foreach ($viter1124 as $kiter1125 => $viter1126)
                {
                  $xfer += $output->writeString($kiter1125);
                  $xfer += $viter1126->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1127 = 0;
            $_etype1130 = 0;
            $xfer += $input->readListBegin($_etype1130, $_size1127);
            for ($_i1131 = 0; $_i1131 < $_size1127; ++$_i1131)
            {
              $elem1132 = null;
              $xfer += $input->readString($elem1132);
              $this->keys []= $elem1132;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1133)
          {
            $xfer += $output->writeString($iter1133);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1134 = 0;
            $_ktype1135 = 0;
            $_vtype1136 = 0;
            $xfer += $input->readMapBegin($_ktype1135, $_vtype1136, $_size1134);
            for ($_i1138 = 0; $_i1138 < $_size1134; ++$_i1138)
            {
              $key1139 = 0;
              $val1140 = array();
              $xfer += $input->readI64($key1139);
              $val1140 = array();
              $_size1141 = 0;
              $_ktype1142 = 0;
              $_vtype1143 = 0;
              $xfer += $input->readMapBegin($_ktype1142, $_vtype1143, $_size1141);
              for ($_i1145 = 0; $_i1145 < $_size1141; ++$_i1145)
              {
                $key1146 = '';
                $val1147 = new \thrift\data\TObject();
                $xfer += $input->readString($key1146);
                $val1147 = new \thrift\data\TObject();
                $xfer += $val1147->read($input);
                $val1140[$key1146] = $val1147;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1139] = $val1140;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1148 => $viter1149)
          {
            $xfer += $output->writeI64($kiter1148);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1149));
              {
                foreach ($viter1149 as $kiter1150 => $viter1151)
                {
                  $xfer += $output->writeString($kiter1150);
                  $xfer += $viter1151->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1152 = 0;
            $_etype1155 = 0;
            $xfer += $input->readListBegin($_etype1155, $_size1152);
            for ($_i1156 = 0; $_i1156 < $_size1152; ++$_i1156)
            {
              $elem1157 = null;
              $xfer += $input->readString($elem1157);
              $this->keys []= $elem1157;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1158)
          {
            $xfer += $output->writeString($iter1158);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1159 = 0;
            $_ktype1160 = 0;
            $_vtype1161 = 0;
            $xfer += $input->readMapBegin($_ktype1160, $_vtype1161, $_size1159);
            for ($_i1163 = 0; $_i1163 < $_size1159; ++$_i1163)
            {
              $key1164 = 0;
              $val1165 = array();
              $xfer += $input->readI64($key1164);
              $val1165 = array();
              $_size1166 = 0;
              $_ktype1167 = 0;
              $_vtype1168 = 0;
              $xfer += $input->readMapBegin($_ktype1167, $_vtype1168, $_size1166);
              for ($_i1170 = 0; $_i1170 < $_size1166; ++$_i1170)
              {
                $key1171 = '';
                $val1172 = new \thrift\data\TObject();
                $xfer += $input->readString($key1171);
                $val1172 = new \thrift\data\TObject();
                $xfer += $val1172->read($input);
                $val1165[$key1171] = $val1172;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1164] = $val1165;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1173 => $viter1174)
          {
            $xfer += $output->writeI64($kiter1173);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1174));
              {
                foreach ($viter1174 as $kiter1175 => $viter1176)
                {
                  $xfer += $output->writeString($kiter1175);
                  $xfer += $viter1176->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1177 = 0;
            $_etype1180 = 0;
            $xfer += $input->readListBegin($_etype1180, $_size1177);
            for ($_i1181 = 0; $_i1181 < $_size1177; ++$_i1181)
            {
              $elem1182 = null;
              $xfer += $input->readString($elem1182);
              $this->keys []= $elem1182;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1183)
          {
            $xfer += $output->writeString($iter1183);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1184 = 0;
            $_ktype1185 = 0;
            $_vtype1186 = 0;
            $xfer += $input->readMapBegin($_ktype1185, $_vtype1186, $_size1184);
            for ($_i1188 = 0; $_i1188 < $_size1184; ++$_i1188)
            {
              $key1189 = 0;
              $val1190 = array();
              $xfer += $input->readI64($key1189);
              $val1190 = array();
              $_size1191 = 0;
              $_ktype1192 = 0;
              $_vtype1193 = 0;
              $xfer += $input->readMapBegin($_ktype1192, $_vtype1193, $_size1191);
              for ($_i1195 = 0; $_i1195 < $_size1191; ++$_i1195)
              {
                $key1196 = '';
                $val1197 = new \thrift\data\TObject();
                $xfer += $input->readString($key1196);
                $val1197 = new \thrift\data\TObject();
                $xfer += $val1197->read($input);
                $val1190[$key1196] = $val1197;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1189] = $val1190;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1198 => $viter1199)
          {
            $xfer += $output->writeI64($kiter1198);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1199));
              {
                foreach ($viter1199 as $kiter1200 => $viter1201)
                {
                  $xfer += $output->writeString($kiter1200);
                  $xfer += $viter1201->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1202 = 0;
            $_etype1205 = 0;
            $xfer += $input->readListBegin($_etype1205, $_size1202);
            for ($_i1206 = 0; $_i1206 < $_size1202; ++$_i1206)
            {
              $elem1207 = null;
              $xfer += $input->readI64($elem1207);
              $this->records []= $elem1207;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1208)
          {
            $xfer += $output->writeI64($iter1208);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 2);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1209 = 0;
            $_etype1212 = 0;
            $xfer += $input->readListBegin($_etype1212, $_size1209);
            for ($_i1213 = 0; $_i1213 < $_size1209; ++$_i1213)
            {
              $elem1214 = null;
              $xfer += $input->readI64($elem1214);
              $this->records []= $elem1214;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1215)
          {
            $xfer += $output->writeI64($iter1215);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1216 = 0;
            $_etype1219 = 0;
            $xfer += $input->readSetBegin($_etype1219, $_size1216);
            for ($_i1220 = 0; $_i1220 < $_size1216; ++$_i1220)
            {
              $elem1221 = null;
              $xfer += $input->readI64($elem1221);
              if (is_scalar($elem1221)) {
                $this->success[$elem1221] = true;
              } else {
                $this->success []= $elem1221;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1222 => $iter1223)
          {
            if (is_scalar($iter1223)) {
            $xfer += $output->writeI64($iter1222);
            } else {
            $xfer += $output->writeI64($iter1223);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\shared\TParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1224 = 0;
            $_etype1227 = 0;
            $xfer += $input->readSetBegin($_etype1227, $_size1224);
            for ($_i1228 = 0; $_i1228 < $_size1224; ++$_i1228)
            {
              $elem1229 = null;
              $xfer += $input->readI64($elem1229);
              if (is_scalar($elem1229)) {
                $this->success[$elem1229] = true;
              } else {
                $this->success []= $elem1229;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\shared\TParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1230 => $iter1231)
          {
            if (is_scalar($iter1231)) {
            $xfer += $output->writeI64($iter1230);
            } else {
            $xfer += $output->writeI64($iter1231);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1232 = 0;
            $_etype1235 = 0;
            $xfer += $input->readListBegin($_etype1235, $_size1232);
            for ($_i1236 = 0; $_i1236 < $_size1232; ++$_i1236)
            {
              $elem1237 = null;
              $elem1237 = new \thrift\data\TObject();
              $xfer += $elem1237->read($input);
              $this->values []= $elem1237;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1238)
          {
            $xfer += $iter1238->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1239 = 0;
            $_etype1242 = 0;
            $xfer += $input->readSetBegin($_etype1242, $_size1239);
            for ($_i1243 = 0; $_i1243 < $_size1239; ++$_i1243)
            {
              $elem1244 = null;
              $xfer += $input->readI64($elem1244);
              if (is_scalar($elem1244)) {
                $this->success[$elem1244] = true;
              } else {
                $this->success []= $elem1244;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1245 => $iter1246)
          {
            if (is_scalar($iter1246)) {
            $xfer += $output->writeI64($iter1245);
            } else {
            $xfer += $output->writeI64($iter1246);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1247 = 0;
            $_etype1250 = 0;
            $xfer += $input->readListBegin($_etype1250, $_size1247);
            for ($_i1251 = 0; $_i1251 < $_size1247; ++$_i1251)
            {
              $elem1252 = null;
              $elem1252 = new \thrift\data\TObject();
              $xfer += $elem1252->read($input);
              $this->values []= $elem1252;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1253)
          {
            $xfer += $iter1253->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1254 = 0;
            $_etype1257 = 0;
            $xfer += $input->readSetBegin($_etype1257, $_size1254);
            for ($_i1258 = 0; $_i1258 < $_size1254; ++$_i1258)
            {
              $elem1259 = null;
              $xfer += $input->readI64($elem1259);
              if (is_scalar($elem1259)) {
                $this->success[$elem1259] = true;
              } else {
                $this->success []= $elem1259;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1260 => $iter1261)
          {
            if (is_scalar($iter1261)) {
            $xfer += $output->writeI64($iter1260);
            } else {
            $xfer += $output->writeI64($iter1261);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyStringOperatorValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyStringOperatorValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1262 = 0;
            $_etype1265 = 0;
            $xfer += $input->readListBegin($_etype1265, $_size1262);
            for ($_i1266 = 0; $_i1266 < $_size1262; ++$_i1266)
            {
              $elem1267 = null;
              $elem1267 = new \thrift\data\TObject();
              $xfer += $elem1267->read($input);
              $this->values []= $elem1267;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyStringOperatorValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1268)
          {
            $xfer += $iter1268->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyStringOperatorValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyStringOperatorValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1269 = 0;
            $_etype1272 = 0;
            $xfer += $input->readSetBegin($_etype1272, $_size1269);
            for ($_i1273 = 0; $_i1273 < $_size1269; ++$_i1273)
            {
              $elem1274 = null;
              $xfer += $input->readI64($elem1274);
              if (is_scalar($elem1274)) {
                $this->success[$elem1274] = true;
              } else {
                $this->success []= $elem1274;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyStringOperatorValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1275 => $iter1276)
          {
            if (is_scalar($iter1276)) {
            $xfer += $output->writeI64($iter1275);
            } else {
            $xfer += $output->writeI64($iter1276);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyStringOperatorValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyStringOperatorValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1277 = 0;
            $_etype1280 = 0;
            $xfer += $input->readListBegin($_etype1280, $_size1277);
            for ($_i1281 = 0; $_i1281 < $_size1277; ++$_i1281)
            {
              $elem1282 = null;
              $elem1282 = new \thrift\data\TObject();
              $xfer += $elem1282->read($input);
              $this->values []= $elem1282;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyStringOperatorValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1283)
          {
            $xfer += $iter1283->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyStringOperatorValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyStringOperatorValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1284 = 0;
            $_etype1287 = 0;
            $xfer += $input->readSetBegin($_etype1287, $_size1284);
            for ($_i1288 = 0; $_i1288 < $_size1284; ++$_i1288)
            {
              $elem1289 = null;
              $xfer += $input->readI64($elem1289);
              if (is_scalar($elem1289)) {
                $this->success[$elem1289] = true;
              } else {
                $this->success []= $elem1289;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyStringOperatorValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1290 => $iter1291)
          {
            if (is_scalar($iter1291)) {
            $xfer += $output->writeI64($iter1290);
            } else {
            $xfer += $output->writeI64($iter1291);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $query = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1292 = 0;
            $_etype1295 = 0;
            $xfer += $input->readSetBegin($_etype1295, $_size1292);
            for ($_i1296 = 0; $_i1296 < $_size1292; ++$_i1296)
            {
              $elem1297 = null;
              $xfer += $input->readI64($elem1297);
              if (is_scalar($elem1297)) {
                $this->success[$elem1297] = true;
              } else {
                $this->success []= $elem1297;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1298 => $iter1299)
          {
            if (is_scalar($iter1299)) {
            $xfer += $output->writeI64($iter1298);
            } else {
            $xfer += $output->writeI64($iter1299);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1300 = 0;
            $_ktype1301 = 0;
            $_vtype1302 = 0;
            $xfer += $input->readMapBegin($_ktype1301, $_vtype1302, $_size1300);
            for ($_i1304 = 0; $_i1304 < $_size1300; ++$_i1304)
            {
              $key1305 = 0;
              $val1306 = '';
              $xfer += $input->readI64($key1305);
              $xfer += $input->readString($val1306);
              $this->success[$key1305] = $val1306;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1307 => $viter1308)
          {
            $xfer += $output->writeI64($kiter1307);
            $xfer += $output->writeString($viter1308);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1309 = 0;
            $_ktype1310 = 0;
            $_vtype1311 = 0;
            $xfer += $input->readMapBegin($_ktype1310, $_vtype1311, $_size1309);
            for ($_i1313 = 0; $_i1313 < $_size1309; ++$_i1313)
            {
              $key1314 = 0;
              $val1315 = '';
              $xfer += $input->readI64($key1314);
              $xfer += $input->readString($val1315);
              $this->success[$key1314] = $val1315;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1316 => $viter1317)
          {
            $xfer += $output->writeI64($kiter1316);
            $xfer += $output->writeString($viter1317);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1318 = 0;
            $_ktype1319 = 0;
            $_vtype1320 = 0;
            $xfer += $input->readMapBegin($_ktype1319, $_vtype1320, $_size1318);
            for ($_i1322 = 0; $_i1322 < $_size1318; ++$_i1322)
            {
              $key1323 = 0;
              $val1324 = '';
              $xfer += $input->readI64($key1323);
              $xfer += $input->readString($val1324);
              $this->success[$key1323] = $val1324;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1325 => $viter1326)
          {
            $xfer += $output->writeI64($kiter1325);
            $xfer += $output->writeString($viter1326);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1327 = 0;
            $_ktype1328 = 0;
            $_vtype1329 = 0;
            $xfer += $input->readMapBegin($_ktype1328, $_vtype1329, $_size1327);
            for ($_i1331 = 0; $_i1331 < $_size1327; ++$_i1331)
            {
              $key1332 = 0;
              $val1333 = '';
              $xfer += $input->readI64($key1332);
              $xfer += $input->readString($val1333);
              $this->success[$key1332] = $val1333;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1334 => $viter1335)
          {
            $xfer += $output->writeI64($kiter1334);
            $xfer += $output->writeString($viter1335);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1336 = 0;
            $_ktype1337 = 0;
            $_vtype1338 = 0;
            $xfer += $input->readMapBegin($_ktype1337, $_vtype1338, $_size1336);
            for ($_i1340 = 0; $_i1340 < $_size1336; ++$_i1340)
            {
              $key1341 = 0;
              $val1342 = '';
              $xfer += $input->readI64($key1341);
              $xfer += $input->readString($val1342);
              $this->success[$key1341] = $val1342;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1343 => $viter1344)
          {
            $xfer += $output->writeI64($kiter1343);
            $xfer += $output->writeString($viter1344);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1345 = 0;
            $_ktype1346 = 0;
            $_vtype1347 = 0;
            $xfer += $input->readMapBegin($_ktype1346, $_vtype1347, $_size1345);
            for ($_i1349 = 0; $_i1349 < $_size1345; ++$_i1349)
            {
              $key1350 = 0;
              $val1351 = '';
              $xfer += $input->readI64($key1350);
              $xfer += $input->readString($val1351);
              $this->success[$key1350] = $val1351;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1352 => $viter1353)
          {
            $xfer += $output->writeI64($kiter1352);
            $xfer += $output->writeString($viter1353);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1354 = 0;
            $_ktype1355 = 0;
            $_vtype1356 = 0;
            $xfer += $input->readMapBegin($_ktype1355, $_vtype1356, $_size1354);
            for ($_i1358 = 0; $_i1358 < $_size1354; ++$_i1358)
            {
              $key1359 = 0;
              $val1360 = array();
              $xfer += $input->readI64($key1359);
              $val1360 = array();
              $_size1361 = 0;
              $_etype1364 = 0;
              $xfer += $input->readSetBegin($_etype1364, $_size1361);
              for ($_i1365 = 0; $_i1365 < $_size1361; ++$_i1365)
              {
                $elem1366 = null;
                $elem1366 = new \thrift\data\TObject();
                $xfer += $elem1366->read($input);
                if (is_scalar($elem1366)) {
                  $val1360[$elem1366] = true;
                } else {
                  $val1360 []= $elem1366;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key1359] = $val1360;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1367 => $viter1368)
          {
            $xfer += $output->writeI64($kiter1367);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1368));
              {
                foreach ($viter1368 as $iter1369 => $iter1370)
                {
                  if (is_scalar($iter1370)) {
                  $xfer += $iter1369->write($output);
                  } else {
                  $xfer += $iter1370->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1371 = 0;
            $_ktype1372 = 0;
            $_vtype1373 = 0;
            $xfer += $input->readMapBegin($_ktype1372, $_vtype1373, $_size1371);
            for ($_i1375 = 0; $_i1375 < $_size1371; ++$_i1375)
            {
              $key1376 = 0;
              $val1377 = array();
              $xfer += $input->readI64($key1376);
              $val1377 = array();
              $_size1378 = 0;
              $_etype1381 = 0;
              $xfer += $input->readSetBegin($_etype1381, $_size1378);
              for ($_i1382 = 0; $_i1382 < $_size1378; ++$_i1382)
              {
                $elem1383 = null;
                $elem1383 = new \thrift\data\TObject();
                $xfer += $elem1383->read($input);
                if (is_scalar($elem1383)) {
                  $val1377[$elem1383] = true;
                } else {
                  $val1377 []= $elem1383;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key1376] = $val1377;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1384 => $viter1385)
          {
            $xfer += $output->writeI64($kiter1384);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1385));
              {
                foreach ($viter1385 as $iter1386 => $iter1387)
                {
                  if (is_scalar($iter1387)) {
                  $xfer += $iter1386->write($output);
                  } else {
                  $xfer += $iter1387->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1388 = 0;
            $_ktype1389 = 0;
            $_vtype1390 = 0;
            $xfer += $input->readMapBegin($_ktype1389, $_vtype1390, $_size1388);
            for ($_i1392 = 0; $_i1392 < $_size1388; ++$_i1392)
            {
              $key1393 = 0;
              $val1394 = array();
              $xfer += $input->readI64($key1393);
              $val1394 = array();
              $_size1395 = 0;
              $_etype1398 = 0;
              $xfer += $input->readSetBegin($_etype1398, $_size1395);
              for ($_i1399 = 0; $_i1399 < $_size1395; ++$_i1399)
              {
                $elem1400 = null;
                $elem1400 = new \thrift\data\TObject();
                $xfer += $elem1400->read($input);
                if (is_scalar($elem1400)) {
                  $val1394[$elem1400] = true;
                } else {
                  $val1394 []= $elem1400;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[$key1393] = $val1394;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1401 => $viter1402)
          {
            $xfer += $output->writeI64($kiter1401);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1402));
              {
                foreach ($viter1402 as $iter1403 => $iter1404)
                {
                  if (is_scalar($iter1404)) {
                  $xfer += $iter1403->write($output);
                  } else {
                  $xfer += $iter1404->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1405 = 0;
            $_etype1408 = 0;
            $xfer += $input->readListBegin($_etype1408, $_size1405);
            for ($_i1409 = 0; $_i1409 < $_size1405; ++$_i1409)
            {
              $elem1410 = null;
              $xfer += $input->readString($elem1410);
              $this->keys []= $elem1410;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1411 = 0;
            $_etype1414 = 0;
            $xfer += $input->readListBegin($_etype1414, $_size1411);
            for ($_i1415 = 0; $_i1415 < $_size1411; ++$_i1415)
            {
              $elem1416 = null;
              $xfer += $input->readI64($elem1416);
              $this->records []= $elem1416;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1417)
          {
            $xfer += $output->writeString($iter1417);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1418)
          {
            $xfer += $output->writeI64($iter1418);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1419 = 0;
            $_etype1422 = 0;
            $xfer += $input->readListBegin($_etype1422, $_size1419);
            for ($_i1423 = 0; $_i1423 < $_size1419; ++$_i1423)
            {
              $elem1424 = null;
              $xfer += $input->readString($elem1424);
              $this->keys []= $elem1424;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1425)
          {
            $xfer += $output->writeString($iter1425);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1426 = 0;
            $_etype1429 = 0;
            $xfer += $input->readListBegin($_etype1429, $_size1426);
            for ($_i1430 = 0; $_i1430 < $_size1426; ++$_i1430)
            {
              $elem1431 = null;
              $xfer += $input->readI64($elem1431);
              $this->records []= $elem1431;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1432)
          {
            $xfer += $output->writeI64($iter1432);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1433 = 0;
            $_etype1436 = 0;
            $xfer += $input->readListBegin($_etype1436, $_size1433);
            for ($_i1437 = 0; $_i1437 < $_size1433; ++$_i1437)
            {
              $elem1438 = null;
              $xfer += $input->readI64($elem1438);
              $this->records []= $elem1438;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1439)
          {
            $xfer += $output->writeI64($iter1439);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1440 = 0;
            $_ktype1441 = 0;
            $_vtype1442 = 0;
            $xfer += $input->readMapBegin($_ktype1441, $_vtype1442, $_size1440);
            for ($_i1444 = 0; $_i1444 < $_size1440; ++$_i1444)
            {
              $key1445 = 0;
              $val1446 = false;
              $xfer += $input->readI64($key1445);
              $xfer += $input->readBool($val1446);
              $this->success[$key1445] = $val1446;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter1447 => $viter1448)
          {
            $xfer += $output->writeI64($kiter1447);
            $xfer += $output->writeBool($viter1448);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $expected = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\data\TObject
   */
  public $replacement = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expected',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'replacement',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['expected'])) {
        $this->expected = $vals['expected'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['replacement'])) {
        $this->replacement = $vals['replacement'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->expected = new \thrift\data\TObject();
            $xfer += $this->expected->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->replacement = new \thrift\data\TObject();
            $xfer += $this->replacement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expected !== null) {
      if (!is_object($this->expected)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expected', TType::STRUCT, 2);
      $xfer += $this->expected->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replacement !== null) {
      if (!is_object($this->replacement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('replacement', TType::STRUCT, 4);
      $xfer += $this->replacement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\shared\TSecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\shared\TTransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TSecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TTransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\shared\TSecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\shared\TTransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


